<?xml version="1.0"?>
<doc>
  <assembly>
    <name>NCryptoki</name>
  </assembly>
  <members>
    <member name="T:Cryptware.NCryptoki.ObjectAttribute">
      <summary>
            Wraps a PKCS#11 Attribute
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.IObjectAttribute">
      <summary>
            ObjectAttribute Interface
            </summary>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.IObjectAttribute.Set(System.Int32,System.Object)">
      <summary>
            Sets the specified type.
            </summary>
      <param name="type">The type.</param>
      <param name="value">The value.</param>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IObjectAttribute.RawValue">
      <summary>
            Gets the raw value.
            </summary>
      <value>The raw value.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IObjectAttribute.AttributeType">
      <summary>
            Gets or sets the type of the attribute.
            </summary>
      <value>The type of the attribute.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IObjectAttribute.AttributeValue">
      <summary>
            Gets or sets the attribute value.
            </summary>
      <value>The attribute value.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IObjectAttribute.AttributeName">
      <summary>
            Gets the name of the attribute.
            </summary>
      <value>The name of the attribute.</value>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ObjectAttribute.#ctor">
      <summary>
            Creates an ObjectAttribute with an emtry type
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.ObjectAttribute.#ctor(System.Int32)">
      <summary>
            Creates an ObjectAttribute with a given type
            </summary>
      <param name="type">Attribute's type</param>
    </member>
    <member name="M:Cryptware.NCryptoki.ObjectAttribute.#ctor(System.Int32,System.Object)">
      <summary>
            Creates an ObjectAttribute with a given type
            </summary>
      <param name="type">Attribute's type</param>
      <param name="value">Attribute's value. Value must be exclusively one of the follwing types: bool, uint, string, byte[].</param>
    </member>
    <member name="M:Cryptware.NCryptoki.ObjectAttribute.Set(System.Int32,System.Object)">
      <summary>
            Set this ObjectAttribute with a given type and value
            </summary>
      <param name="type">Attribute's type</param>
      <param name="value">Attribute's value. Value must be exclusively one of the follwing types: bool, uint, string, byte[].</param>
    </member>
    <member name="P:Cryptware.NCryptoki.ObjectAttribute.AttributeValue">
      <summary>
            Value of this attribute
            </summary>
      <remarks>
      </remarks>
      <returns>Attribute's value</returns>
    </member>
    <member name="P:Cryptware.NCryptoki.ObjectAttribute.RawValue">
      <summary>
            Raw value in bytes of this attribute
            </summary>
      <remarks>
      </remarks>
      <returns>Attribute's raw value</returns>
    </member>
    <member name="P:Cryptware.NCryptoki.ObjectAttribute.AttributeType">
      <summary>
            Type of this attribute
            </summary>
      <remarks>
      </remarks>
      <returns>Attribute's type</returns>
    </member>
    <member name="P:Cryptware.NCryptoki.ObjectAttribute.AttributeName">
      <summary>
            Gets the name of the attribute.
            </summary>
      <value>The name of the attribute.</value>
            31/05/2010
        </member>
    <member name="T:Cryptware.NCryptoki.Certificate">
      <summary>
            Wraps a PKCS#11 Certificate Object 
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Storage">
      <summary>
            Wraps a PKCS#11 Storage Object 
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.CryptokiObject">
      <summary>
            Wraps a PKCS#11 generic Object
            <br />
            This is the base for all PKCS#11 object
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.ICryptokiObject">
      <summary>
            CryptokiObject Interface
            </summary>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ICryptokiObject.Copy(Cryptware.NCryptoki.CryptokiCollection)">
      <summary>
            Copies the specified att list.
            </summary>
      <param name="attList">The att list.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICryptokiObject.Attributes">
      <summary>
            Gets the attributes.
            </summary>
      <value>The attributes.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICryptokiObject.Class">
      <summary>
            Gets the class.
            </summary>
      <value>The class.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICryptokiObject.Handle">
      <summary>
            Gets the handle.
            </summary>
      <value>The handle.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICryptokiObject.Size">
      <summary>
            Gets the size.
            </summary>
      <value>The size.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICryptokiObject.ClassName">
      <summary>
            Gets the name of the class.
            </summary>
      <value>The name of the class.</value>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.CryptokiObject.Copy(Cryptware.NCryptoki.CryptokiCollection)">
      <summary>
            Copies this object, creating a new object for the copy
            </summary>
      <param name="attList">Attributes to add the copied object</param>
      <remarks>
            The template may specify new values for any attributes of the object that can ordinarily
            be modified (e.g., in the course of copying a secret key, a key’s CKA_EXTRACTABLE
            attribute may be changed from CK_TRUE to CK_FALSE, but not the other way around.
            If this change is made, the new key’s CKA_NEVER_EXTRACTABLE attribute will
            have the value CK_FALSE. Similarly, the template may specify that the new key’s
            CKA_SENSITIVE attribute be CK_TRUE; the new key will have the same value for its
            CKA_ALWAYS_SENSITIVE attribute as the original key). It may also specify new
            values of the CKA_TOKEN and CKA_PRIVATE attributes (e.g., to copy a session
            object to a token object). If the template specifies a value of an attribute which is
            incompatible with other existing attributes of the object, the call fails with the return code CKR_TEMPLATE_INCONSISTENT.<br />
            If a call to CopyObject cannot support the precise template supplied to it, it will fail
            and return without creating any object. Only session objects can be created during a read-only session. Only public objects can
            be created unless the normal user is logged in.         
            </remarks>
      <returns>the object copied</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">CryptokiException if a native error occurs</exception>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiObject.Handle">
      <summary>
            Handle to this object inside native cryptoki
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiObject.Size">
      <summary>
            Size in bytes of this object 
            </summary>
      <remarks>
            Cryptoki does not specify what the precise meaning of an object’s size is. Intuitively, it
            is some measure of how much token memory the object takes up. If an application
            deletes (say) a private object of size S, it might be reasonable to assume that the
            FreePrivateMemory property of the token’s TokenInfo structure increases by approximately S.
            </remarks>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">CryptokiException if a native error occurs</exception>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiObject.Class">
      <summary>
            Class of this object 
            </summary>
      <see cref="T:Cryptware.NCryptoki.ObjectAttribute" />
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiObject.Attributes">
      <summary>
            Gets the attributes set.
            </summary>
      <value>The attributes set.</value>
      <remarks>
            This property can be used to get and set object's attributes.
            </remarks>
      <see cref="T:Cryptware.NCryptoki.AttributeSet" />
            11/10/2010
        </member>
    <member name="P:Cryptware.NCryptoki.CryptokiObject.ClassName">
      <summary>
            Gets the name of this PKCS#11 object's class.
            </summary>
      <value>The name of the PKCS#11 object's class.</value>
            31/05/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IStorage">
      <summary>
            Storage Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IStorage.Label">
      <summary>
            Gets the label.
            </summary>
      <value>The label.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IStorage.Modifiable">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IStorage" /> is modifiable.
            </summary>
      <value>
        <c>true</c> if modifiable; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IStorage.Private">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IStorage" /> is private.
            </summary>
      <value>
        <c>true</c> if private; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IStorage.Token">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IStorage" /> is token.
            </summary>
      <value>
        <c>true</c> if token; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.Storage.Token">
      <summary>
            Value of this CKA_TOKEN attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Storage.Label">
      <summary>
            Value of this CKA_LABEL attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Storage.Private">
      <summary>
            Value of this CKA_PRIVATE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Storage.Modifiable">
      <summary>
            Value of this CKA_MODIFIABLE attribute
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.ICertificate">
      <summary>
            Certificate Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICertificate.SerialNumber">
      <summary>
            Gets the serial number.
            </summary>
      <value>The serial number.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICertificate.CertificateType">
      <summary>
            Gets the type of the certificate.
            </summary>
      <value>The type of the certificate.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICertificate.CertificateValue">
      <summary>
            Gets the certificate value.
            </summary>
      <value>The certificate value.</value>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.Certificate.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            30/11/2010
        </member>
    <member name="P:Cryptware.NCryptoki.Certificate.CertificateType">
      <summary>
            Type of this certificate
            </summary>
      <returns>Certificate's type</returns>
    </member>
    <member name="P:Cryptware.NCryptoki.Certificate.SerialNumber">
      <summary>
            Serial number of this certificate
            </summary>
      <returns>Certificate's Serial number</returns>
    </member>
    <member name="P:Cryptware.NCryptoki.Certificate.CertificateValue">
      <summary>
            Value of this certificate
            </summary>
      <returns>Certificate's value</returns>
    </member>
    <member name="P:Cryptware.NCryptoki.Certificate.CertificateTypeName">
      <summary>
            Gets the name of the certificate type.
            </summary>
      <value>The name of the certificate type.</value>
            31/05/2010
        </member>
    <member name="T:Cryptware.NCryptoki.AttributeSet">
      <summary>
            Implements a set to get object's attributes in a easy way
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.IAttributeSet">
      <summary>
      </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IAttributeSet.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Cryptware.NCryptoki.ObjectAttribute" /> with the specified type.
            </summary>
      <value>
      </value>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.AttributeSet.Get(System.Int32)">
      <summary>
            Gets the specified attribute 
            </summary>
      <param name="type">Type of the attribute to get</param>
      <remarks>Calls C_GetAttributeValue</remarks>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">CryptokiException if a native error occurs</exception>
    </member>
    <member name="P:Cryptware.NCryptoki.AttributeSet.Item(System.Int32)">
      <summary>
            Gets the specified attribute 
            </summary>
      <param name="type">Type of the attribute to get</param>
      <remarks>Calls C_GetAttributeValue</remarks>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">CryptokiException if a native error occurs</exception>
    </member>
    <member name="T:Cryptware.NCryptoki.Clock">
      <summary>
            Wraps a PKCS#11 Clock Object 
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.HardwareFeature">
      <summary>
            Wraps a PKCS#11 ECPublicKey Object 
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.IHardwareFeature">
      <summary>
            HardwareFeature Intercace
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IHardwareFeature.FeatureType">
      <summary>
            Gets the type of the feature.
            </summary>
      <value>The type of the feature.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IHardwareFeature.FeatureValue">
      <summary>
            Gets the feature value.
            </summary>
      <value>The feature value.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.HardwareFeature.FeatureType">
      <summary>
            Value of this CKA_HW_FEATURE_TYPE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.HardwareFeature.FeatureValue">
      <summary>
            Value of this CKA_VALUE attribute
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.IClock">
      <summary>
            Clock Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IClock.ClockValue">
      <summary>
            Gets the clock value.
            </summary>
      <value>The clock value.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.Clock.ClockValue">
      <summary>
            Value of this clock object
            </summary>
      <remarks>
      </remarks>
      <returns>return the value of this clock object as byte array</returns>
    </member>
    <member name="T:Cryptware.NCryptoki.LogWriter">
      <summary>
            A Logging class implementing the Singleton pattern and an internal Queue to be flushed perdiodically
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.LogWriter.WriteToLog(System.String)">
      <summary>
            The single instance method that writes to the log file
            </summary>
      <param name="message">The message to write to the log</param>
    </member>
    <member name="P:Cryptware.NCryptoki.LogWriter.Instance">
      <summary>
            An LogWriter instance that exposes a single instance
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Log">
      <summary>
            A Log class to store the message and the Date and Time the log entry was created
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.AES_CBC_ENCRYPT_DATA_PARAMS">
      <summary>
            Provides the parameters for CKM_AES_CBC_ENCRYPT_DATA mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.AES_CBC_ENCRYPT_DATA_PARAMS.Iv">
      <summary>
            IV value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.AES_CBC_ENCRYPT_DATA_PARAMS.Data">
      <summary>
            Data value part that must be a multiple of 16 bytes long
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.AES_CBC_ENCRYPT_DATA_PARAMS.Length">
      <summary>
            Length of data in bytes
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.AES_CTR_PARAMS">
      <summary>
            Provides the parameters to the CKM_AES_CTR mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.AES_CTR_PARAMS.CounterBits">
      <summary>
            Number of bits in the counter block (cb) that shall be incremented
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.AES_CTR_PARAMS.Cb">
      <summary>
            Specifies the counter block
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.ARIA_CBC_ENCRYPT_DATA_PARAMS">
      <summary>
            Provides the parameters to the CKM_ARIA_CBC_ENCRYPT_DATA mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ARIA_CBC_ENCRYPT_DATA_PARAMS.Iv">
      <summary>
            16-octet IV
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ARIA_CBC_ENCRYPT_DATA_PARAMS.Data">
      <summary>
            Pointer to data to encrypt
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ARIA_CBC_ENCRYPT_DATA_PARAMS.Length">
      <summary>
            Length of data to encrypt
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.CAMELLIA_CBC_ENCRYPT_DATA_PARAMS">
      <summary>
            Provides the parameters for CKM_CAMELLIA_CBC_ENCRYPT_DATA mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.CAMELLIA_CBC_ENCRYPT_DATA_PARAMS.Iv">
      <summary>
            16-octet IV
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.CAMELLIA_CBC_ENCRYPT_DATA_PARAMS.Data">
      <summary>
            Pointer to data to encrypt
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.CAMELLIA_CBC_ENCRYPT_DATA_PARAMS.Length">
      <summary>
            Length of data to encrypt
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.CAMELLIA_CTR_PARAMS">
      <summary>
            Provides the parameters to the CKM_CAMELLIA_CTR mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.CAMELLIA_CTR_PARAMS.CounterBits">
      <summary>
            Specifies the number of bits in the counter block (cb) that shall be incremented
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.CAMELLIA_CTR_PARAMS.Cb">
      <summary>
            Specifies the counter block
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.CMS_SIG_PARAMS">
      <summary>
            Provides the parameters to the CKM_CMS_SIG mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.CMS_SIG_PARAMS.CertificateHandle">
      <summary>
            Object handle for the certificate related to the signing key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.CMS_SIG_PARAMS.SigningMechanism">
      <summary>
            Mechanism to use when signing
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.CMS_SIG_PARAMS.DigestMechanism">
      <summary>
            Mechanism to use when digesting the data
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.CMS_SIG_PARAMS.ContentType">
      <summary>
            Pointer to a NULL-terminated string indicating the MIME Content-type of message to be signed or null if the message is a MIME object
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.CMS_SIG_PARAMS.RequestedAttributes">
      <summary>
            Pointer to DER-encoded list of CMS Attributes the caller requests to be included in the signed attributes
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.CMS_SIG_PARAMS.RequestedAttributesLen">
      <summary>
            Length in bytes of the value pointed to by RequestedAttributes
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.CMS_SIG_PARAMS.RequiredAttributes">
      <summary>
            Pointer to DER-encoded list of CMS Attributes (with accompanying values) required to be included in the resulting signed attributes
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.CMS_SIG_PARAMS.RequiredAttributesLen">
      <summary>
            Length in bytes, of the value pointed to by RequiredAttributes
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.DES_CBC_ENCRYPT_DATA_PARAMS">
      <summary>
            Provides the parameters to the CKM_DES_CBC_ENCRYPT_DATA and CKM_DES3_CBC_ENCRYPT_DATA mechanisms
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.DES_CBC_ENCRYPT_DATA_PARAMS.Iv">
      <summary>
            IV value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.DES_CBC_ENCRYPT_DATA_PARAMS.Data">
      <summary>
            Data value part that must be a multiple of 8 bytes long
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.DES_CBC_ENCRYPT_DATA_PARAMS.Length">
      <summary>
            Length of data in bytes
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.ECDH1_DERIVE_PARAMS">
      <summary>
            Provides the parameters for the CKM_ECDH1_DERIVE and CKM_ECDH1_COFACTOR_DERIVE key derivation mechanisms
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH1_DERIVE_PARAMS.Kdf">
      <summary>
            Key derivation function used on the shared secret value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH1_DERIVE_PARAMS.SharedDataLen">
      <summary>
            Length in bytes of the shared info
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH1_DERIVE_PARAMS.SharedData">
      <summary>
            Some data shared between the two parties
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH1_DERIVE_PARAMS.PublicDataLen">
      <summary>
            Length in bytes of the other party's EC public key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH1_DERIVE_PARAMS.PublicData">
      <summary>
            Pointer to other party's EC public key value
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.ECDH2_DERIVE_PARAMS">
      <summary>
             Provides the parameters to the CKM_ECMQV_DERIVE mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH2_DERIVE_PARAMS.Kdf">
      <summary>
            Key derivation function used on the shared secret value 
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH2_DERIVE_PARAMS.SharedDataLen">
      <summary>
            Length in bytes of the shared info
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH2_DERIVE_PARAMS.SharedData">
      <summary>
            Some data shared between the two parties
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH2_DERIVE_PARAMS.PublicDataLen">
      <summary>
            Length in bytes of the other party's first EC public key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH2_DERIVE_PARAMS.PublicData">
      <summary>
            Pointer to other party's first EC public key value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH2_DERIVE_PARAMS.PrivateDataLen">
      <summary>
            Length in bytes of the second EC private key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH2_DERIVE_PARAMS.PrivateData">
      <summary>
            Key handle for second EC private key value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH2_DERIVE_PARAMS.PublicDataLen2">
      <summary>
            Length in bytes of the other party's second EC public key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECDH2_DERIVE_PARAMS.PublicData2">
      <summary>
            Pointer to other party's second EC public key value
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.ECMQV_DERIVE_PARAMS">
      <summary>
             Provides the parameters to the CKM_ECMQV_DERIVE mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECMQV_DERIVE_PARAMS.Kdf">
      <summary>
            Key derivation function used on the shared secret value 
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECMQV_DERIVE_PARAMS.SharedDataLen">
      <summary>
            Length in bytes of the shared info
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECMQV_DERIVE_PARAMS.SharedData">
      <summary>
            Some data shared between the two parties
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECMQV_DERIVE_PARAMS.PublicDataLen">
      <summary>
            Length in bytes of the other party's first EC public key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECMQV_DERIVE_PARAMS.PublicData">
      <summary>
            Pointer to other party's first EC public key value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECMQV_DERIVE_PARAMS.PrivateDataLen">
      <summary>
            Length in bytes of the second EC private key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECMQV_DERIVE_PARAMS.PrivateData">
      <summary>
            Key handle for second EC private key value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECMQV_DERIVE_PARAMS.PublicDataLen2">
      <summary>
            Length in bytes of the other party's second EC public key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECMQV_DERIVE_PARAMS.PublicData2">
      <summary>
            Pointer to other party's second EC public key value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.ECMQV_DERIVE_PARAMS.PublicKey">
      <summary>
            Handle to the first party's ephemeral public key
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.EXTRACT_PARAMS">
      <summary>
            Provides the parameter to the CKM_EXTRACT_KEY_FROM_KEY mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.EXTRACT_PARAMS.Bit">
      <summary>
            Bit of the base key to be used as the first bit of the derived key
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.KEA_DERIVE_PARAMS">
      <summary>
            Provides the parameters to the CKM_KEA_DERIVE mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.KEA_DERIVE_PARAMS.IsSender">
      <summary>
            Option for generating the key.
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.KEA_DERIVE_PARAMS.RandomLen">
      <summary>
            Size of random Ra and Rb, in bytes
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.KEA_DERIVE_PARAMS.RandomA">
      <summary>
            Pointer to Ra data
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.KEA_DERIVE_PARAMS.RandomB">
      <summary>
            Pointer to Rb data
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.KEA_DERIVE_PARAMS.PublicDataLen">
      <summary>
            Other party's KEA public key size
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.KEA_DERIVE_PARAMS.PublicData">
      <summary>
            Pointer to other party's KEA public key value
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.KEY_DERIVATION_STRING_DATA">
      <summary>
            Provides the parameters for the CKM_CONCATENATE_BASE_AND_DATA, CKM_CONCATENATE_DATA_AND_BASE and CKM_XOR_BASE_AND_DATA mechanisms
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.KEY_DERIVATION_STRING_DATA.Data">
      <summary>
            Pointer to the byte string
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.KEY_DERIVATION_STRING_DATA.Len">
      <summary>
            Length of the byte string
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.KEY_WRAP_SET_OAEP_PARAMS">
      <summary>
            Provides the parameters to the CKM_KEY_WRAP_SET_OAEP mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.KEY_WRAP_SET_OAEP_PARAMS.BC">
      <summary>
            Block contents byte
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.KEY_WRAP_SET_OAEP_PARAMS.X">
      <summary>
            Concatenation of hash of plaintext data  and extra data 
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.KEY_WRAP_SET_OAEP_PARAMS.XLen">
      <summary>
            Length in bytes of concatenation of hash of plaintext data and extra data or 0 if neither is present
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.MAC_GENERAL_PARAMS">
      <summary>
            Provides the parameters to the general-length MACing mechanisms (DES, DES3, CAST, CAST3, CAST128 (CAST5), IDEA, CDMF and AES), the general length HMACing mechanisms (MD2, MD5, SHA-1, SHA-256, SHA-384, SHA-512, RIPEMD-128 and RIPEMD-160) and the two SSL 3.0 MACing mechanisms (MD5 and SHA-1)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.MAC_GENERAL_PARAMS.MacLength">
      <summary>
            Length of the MAC produced, in bytes
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.OTP_PARAM">
      <summary>
            Structure that includes the type, value and length of an OTP parameter
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.OTP_PARAM.Type">
      <summary>
            Parameter type
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.OTP_PARAM.Value">
      <summary>
            Pointer to the value of the parameter
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.OTP_PARAM.ValueLen">
      <summary>
            Length in bytes of the value
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.OTP_PARAMS">
      <summary>
            Structure that is used to provide parameters for OTP mechanisms in a generic fashion
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.OTP_PARAMS.Params">
      <summary>
            Pointer to an array of OTP parameters (CK_OTP_PARAM structures)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.OTP_PARAMS.Count">
      <summary>
            The number of parameters in the array
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.OTP_SIGNATURE_INFO">
      <summary>
            Structure that is returned by all OTP mechanisms in successful calls to C_Sign (C_SignFinal)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.OTP_SIGNATURE_INFO.Params">
      <summary>
            Pointer to an array of OTP parameter values (CK_OTP_PARAM structures)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.OTP_SIGNATURE_INFO.Count">
      <summary>
            The number of parameters in the array
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.PBE_PARAMS">
      <summary>
            Structure which provides all of the necessary information required by the CKM_PBE mechanisms and the CKM_PBA_SHA1_WITH_SHA1_HMAC mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PBE_PARAMS.InitVector">
      <summary>
            Pointer to the location that receives the 8-byte initialization vector (IV), if an IV is required
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PBE_PARAMS.Password">
      <summary>
            Points to the password to be used in the PBE key generation
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PBE_PARAMS.PasswordLen">
      <summary>
            Length in bytes of the password information
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PBE_PARAMS.Salt">
      <summary>
            Points to the salt to be used in the PBE key generation
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PBE_PARAMS.SaltLen">
      <summary>
            Length in bytes of the salt information
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PBE_PARAMS.Iteration">
      <summary>
            Number of iterations required for the generation
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.PKCS5_PBKD2_PARAMS">
      <summary>
            Provides the parameters to the CKM_PKCS5_PBKD2 mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PKCS5_PBKD2_PARAMS.SaltSource">
      <summary>
            Source of the salt value (CKZ)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PKCS5_PBKD2_PARAMS.SaltSourceData">
      <summary>
            Data used as the input for the salt source
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PKCS5_PBKD2_PARAMS.SaltSourceDataLen">
      <summary>
            Length of the salt source input
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PKCS5_PBKD2_PARAMS.Iterations">
      <summary>
            Number of iterations to perform when generating each block of random data
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PKCS5_PBKD2_PARAMS.Prf">
      <summary>
            Pseudo-random function to used to generate the key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PKCS5_PBKD2_PARAMS.PrfData">
      <summary>
            Data used as the input for PRF in addition to the salt value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PKCS5_PBKD2_PARAMS.PrfDataLen">
      <summary>
            Length of the input data for the PRF
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PKCS5_PBKD2_PARAMS.Password">
      <summary>
            Points to the password to be used in the PBE key generation
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.PKCS5_PBKD2_PARAMS.PasswordLen">
      <summary>
            Length in bytes of the password information
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.RC2_CBC_PARAMS">
      <summary>
            Provides the parameters to the CKM_RC2_CBC and CKM_RC2_CBC_PAD mechanisms
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC2_CBC_PARAMS.EffectiveBits">
      <summary>
            The effective number of bits in the RC2 search space
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC2_CBC_PARAMS.Iv">
      <summary>
            The initialization vector (IV) for cipher block chaining mode
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.RC2_MAC_GENERAL_PARAMS">
      <summary>
            Provides the parameters to the CKM_RC2_MAC_GENERAL mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC2_MAC_GENERAL_PARAMS.EffectiveBits">
      <summary>
            The effective number of bits in the RC2 search space
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC2_MAC_GENERAL_PARAMS.MacLength">
      <summary>
            Length of the MAC produced, in bytes
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.RC2_PARAMS">
      <summary>
            Provides the parameters to the CKM_RC2_ECB and CKM_RC2_MAC mechanisms
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC2_PARAMS.EffectiveBits">
      <summary>
            Effective number of bits in the RC2 search space
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.RC5_CBC_PARAMS">
      <summary>
            Provides the parameters to the CKM_RC5_CBC and CKM_RC5_CBC_PAD mechanisms
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC5_CBC_PARAMS.Wordsize">
      <summary>
            Wordsize of RC5 cipher in bytes
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC5_CBC_PARAMS.Rounds">
      <summary>
            Number of rounds of RC5 encipherment
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC5_CBC_PARAMS.Iv">
      <summary>
            Pointer to initialization vector (IV) for CBC encryption
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC5_CBC_PARAMS.IvLen">
      <summary>
            Length of initialization vector (must be same as blocksize)
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.RC5_MAC_GENERAL_PARAMS">
      <summary>
            Provides the parameters to the CKM_RC5_MAC_GENERAL mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC5_MAC_GENERAL_PARAMS.Wordsize">
      <summary>
            Wordsize of RC5 cipher in bytes
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC5_MAC_GENERAL_PARAMS.Rounds">
      <summary>
            Number of rounds of RC5 encipherment
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC5_MAC_GENERAL_PARAMS.MacLength">
      <summary>
            Length of the MAC produced, in bytes
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.RC5_PARAMS">
      <summary>
            Provides the parameters to the CKM_RC5_ECB and CKM_RC5_MAC mechanisms
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC5_PARAMS.Wordsize">
      <summary>
            Wordsize of RC5 cipher in bytes
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RC5_PARAMS.Rounds">
      <summary>
            Number of rounds of RC5 encipherment
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.RSA_PKCS_OAEP_PARAMS">
      <summary>
            Provides the parameters to the CKM_RSA_PKCS_OAEP mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RSA_PKCS_OAEP_PARAMS.HashAlg">
      <summary>
            Mechanism ID of the message digest algorithm used to calculate the digest of the encoding parameter (CKM)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RSA_PKCS_OAEP_PARAMS.Mgf">
      <summary>
            Mask generation function to use on the encoded block (CKG)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RSA_PKCS_OAEP_PARAMS.Source">
      <summary>
            Source of the encoding parameter (CKZ)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RSA_PKCS_OAEP_PARAMS.SourceData">
      <summary>
            Data used as the input for the encoding parameter source
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RSA_PKCS_OAEP_PARAMS.SourceDataLen">
      <summary>
            Length of the encoding parameter source input
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.RSA_PKCS_PSS_PARAMS">
      <summary>
            Provides the parameters to the CKM_RSA_PKCS_PSS mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RSA_PKCS_PSS_PARAMS.HashAlg">
      <summary>
            Hash algorithm used in the PSS encoding (CKM)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RSA_PKCS_PSS_PARAMS.Mgf">
      <summary>
            Mask generation function to use on the encoded block (CKG)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.RSA_PKCS_PSS_PARAMS.Len">
      <summary>
            Length, in bytes, of the salt value used in the PSS encoding
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.SKIPJACK_PRIVATE_WRAP_PARAMS">
      <summary>
            Provides the parameters to the CKM_SKIPJACK_PRIVATE_WRAP mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_PRIVATE_WRAP_PARAMS.PasswordLen">
      <summary>
            Length of the password
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_PRIVATE_WRAP_PARAMS.Password">
      <summary>
            Pointer to the buffer which contains the user-supplied password
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_PRIVATE_WRAP_PARAMS.PublicDataLen">
      <summary>
            Other party's key exchange public key size
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_PRIVATE_WRAP_PARAMS.PublicData">
      <summary>
            Pointer to other party's key exchange public key value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_PRIVATE_WRAP_PARAMS.PAndGLen">
      <summary>
            Length of prime and base values
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_PRIVATE_WRAP_PARAMS.QLen">
      <summary>
            Length of subprime value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_PRIVATE_WRAP_PARAMS.RandomLen">
      <summary>
            Size of random Ra, in bytes
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_PRIVATE_WRAP_PARAMS.RandomA">
      <summary>
            Pointer to Ra data
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_PRIVATE_WRAP_PARAMS.PrimeP">
      <summary>
            Pointer to Prime, p, value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_PRIVATE_WRAP_PARAMS.BaseG">
      <summary>
            Pointer to Base, g, value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_PRIVATE_WRAP_PARAMS.SubprimeQ">
      <summary>
            Pointer to Subprime, q, value
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS">
      <summary>
            Provides the parameters to the CKM_SKIPJACK_RELAYX mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.OldWrappedXLen">
      <summary>
            Length of old wrapped key in bytes
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.OldWrappedX">
      <summary>
            Pointer to old wrapper key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.OldPasswordLen">
      <summary>
            Length of the old password
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.OldPassword">
      <summary>
            Pointer to the buffer which contains the old user-supplied password
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.OldPublicDataLen">
      <summary>
            Old key exchange public key size
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.OldPublicData">
      <summary>
            Pointer to old key exchange public key value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.OldRandomLen">
      <summary>
            Size of old random Ra in bytes
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.OldRandomA">
      <summary>
            Pointer to old Ra data
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.NewPasswordLen">
      <summary>
            Length of the new password
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.NewPassword">
      <summary>
            Pointer to the buffer which contains the new usersupplied password
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.NewPublicDataLen">
      <summary>
            New key exchange public key size
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.NewPublicData">
      <summary>
            Pointer to new key exchange public key value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.NewRandomLen">
      <summary>
            Size of new random Ra in bytes
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SKIPJACK_RELAYX_PARAMS.NewRandomA">
      <summary>
            Pointer to new Ra data
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_OUT">
      <summary>
            Structure that contains the resulting key handles and initialization vectors after performing a C_DeriveKey function with the CKM_SSL3_KEY_AND_MAC_DERIVE mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_OUT.ClientMacSecret">
      <summary>
            Key handle for the resulting Client MAC Secret key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_OUT.ServerMacSecret">
      <summary>
            Key handle for the resulting Server MAC Secret key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_OUT.ClientKey">
      <summary>
            Key handle for the resulting Client Secret key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_OUT.ServerKey">
      <summary>
            Key handle for the resulting Server Secret key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_OUT.IVClient">
      <summary>
            Pointer to a location which receives the initialization vector (IV) created for the client (if any)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_OUT.IVServer">
      <summary>
            Pointer to a location which receives the initialization vector (IV) created for the server (if any)
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_PARAMS">
      <summary>
            Provides the parameters to the CKM_SSL3_KEY_AND_MAC_DERIVE mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_PARAMS.MacSizeInBits">
      <summary>
            Length (in bits) of the MACing keys agreed upon during the protocol handshake phase
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_PARAMS.KeySizeInBits">
      <summary>
            Length (in bits) of the secret keys agreed upon during the protocol handshake phase
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_PARAMS.IVSizeInBits">
      <summary>
            Length (in bits) of the IV agreed upon during the protocol handshake phase or if no IV is required, Length should be set to 0
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_PARAMS.IsExport">
      <summary>
            Flag which indicates whether the keys have to be derived for an export version of the protocol
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_PARAMS.RandomInfo">
      <summary>
            Client's and server's random data information
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_KEY_MAT_PARAMS.ReturnedKeyMaterial">
      <summary>
            Points to a CK_SSL3_KEY_MAT_OUT structure which receives the handles for the keys generated and the IVs
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.SSL3_MASTER_KEY_DERIVE_PARAMS">
      <summary>
            Provides the parameters to the CKM_SSL3_MASTER_KEY_DERIVE and CKM_SSL3_MASTER_KEY_DERIVE_DH mechanisms
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_MASTER_KEY_DERIVE_PARAMS.RandomInfo">
      <summary>
            Client's and server's random data information
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_MASTER_KEY_DERIVE_PARAMS.Version">
      <summary>
            Pointer to a CK_VERSION structure which receives the SSL protocol version information
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.SSL3_RANDOM_DATA">
      <summary>
            Structure which provides information about the random data of a client and a server in an SSL context
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_RANDOM_DATA.ClientRandom">
      <summary>
            Pointer to the client's random data
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_RANDOM_DATA.ClientRandomLen">
      <summary>
            Length in bytes of the client's random data
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_RANDOM_DATA.ServerRandom">
      <summary>
            Pointer to the server's random data
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.SSL3_RANDOM_DATA.ServerRandomLen">
      <summary>
            Length in bytes of the server's random data
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.TLS_PRF_PARAMS">
      <summary>
            Structure, which provides the parameters to the CKM_TLS_PRF mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.TLS_PRF_PARAMS.Seed">
      <summary>
            Pointer to the input seed
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.TLS_PRF_PARAMS.SeedLen">
      <summary>
            Length in bytes of the input seed
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.TLS_PRF_PARAMS.Label">
      <summary>
            Pointer to the identifying label
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.TLS_PRF_PARAMS.LabelLen">
      <summary>
            Length in bytes of the identifying label
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.TLS_PRF_PARAMS.Output">
      <summary>
            Pointer receiving the output of the operation
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.TLS_PRF_PARAMS.OutputLen">
      <summary>
            Pointer to Length in bytes (uint) that the output to be created shall have, has to hold the desired length as input and will receive the calculated length as output
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.WTLS_KEY_MAT_OUT">
      <summary>
            Structure that contains the resulting key handles and initialization vectors after performing a C_DeriveKey function with the CKM_WTLS_SEVER_KEY_AND_MAC_DERIVE or with the CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_KEY_MAT_OUT.MacSecret">
      <summary>
            Key handle for the resulting MAC secret key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_KEY_MAT_OUT.Key">
      <summary>
            Key handle for the resulting secret key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_KEY_MAT_OUT.IV">
      <summary>
            Pointer to a location which receives the initialization vector (IV) created (if any)
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.WTLS_KEY_MAT_PARAMS">
      <summary>
            Provides the parameters to the CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE and the CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE mechanisms
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_KEY_MAT_PARAMS.DigestMechanism">
      <summary>
            The digest mechanism to be used (CKM)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_KEY_MAT_PARAMS.MacSizeInBits">
      <summary>
            Length (in bits) of the MACing key agreed upon during the protocol handshake phase
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_KEY_MAT_PARAMS.KeySizeInBits">
      <summary>
            Length (in bits) of the secret key agreed upon during the handshake phase
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_KEY_MAT_PARAMS.IVSizeInBits">
      <summary>
            Length (in bits) of the IV agreed upon during the handshake phase or if no IV is required, Length should be set to 0
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_KEY_MAT_PARAMS.SequenceNumber">
      <summary>
            The current sequence number used for records sent by the client and server respectively
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_KEY_MAT_PARAMS.IsExport">
      <summary>
            Flag which indicates whether the keys have to be derived for an export version of the protocol
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_KEY_MAT_PARAMS.RandomInfo">
      <summary>
            Client's and server's random data information
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_KEY_MAT_PARAMS.ReturnedKeyMaterial">
      <summary>
            Points to a CK_WTLS_KEY_MAT_OUT structure which receives the handles for the keys generated and the IV
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.WTLS_MASTER_KEY_DERIVE_PARAMS">
      <summary>
            Structure, which provides the parameters to the CKM_WTLS_MASTER_KEY_DERIVE mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_MASTER_KEY_DERIVE_PARAMS.DigestMechanism">
      <summary>
            Digest mechanism to be used (CKM)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_MASTER_KEY_DERIVE_PARAMS.RandomInfo">
      <summary>
            Client's and server's random data information
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_MASTER_KEY_DERIVE_PARAMS.Version">
      <summary>
            Pointer to single byte which receives the WTLS protocol version information
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.WTLS_PRF_PARAMS">
      <summary>
            Structure, which provides the parameters to the CKM_WTLS_PRF mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_PRF_PARAMS.DigestMechanism">
      <summary>
            Digest mechanism to be used (CKM)
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_PRF_PARAMS.Seed">
      <summary>
            Pointer to the input seed
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_PRF_PARAMS.SeedLen">
      <summary>
            Length in bytes of the input seed
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_PRF_PARAMS.Label">
      <summary>
            Pointer to the identifying label
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_PRF_PARAMS.LabelLen">
      <summary>
            Length in bytes of the identifying label
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_PRF_PARAMS.Output">
      <summary>
            Pointer receiving the output of the operation
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_PRF_PARAMS.OutputLen">
      <summary>
            Pointer to Length in bytes (uint) that the output to be created shall have, has to hold the desired length as input and will receive the calculated length as output
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.WTLS_RANDOM_DATA">
      <summary>
            Structure, which provides information about the random data of a client and a server in a WTLS context
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_RANDOM_DATA.ClientRandom">
      <summary>
            Pointer to the client's random data
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_RANDOM_DATA.ClientRandomLen">
      <summary>
            Length in bytes of the client's random data
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_RANDOM_DATA.ServerRandom">
      <summary>
            Pointer to the server's random data
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.WTLS_RANDOM_DATA.ServerRandomLen">
      <summary>
            Length in bytes of the server's random data
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.X9_42_DH1_DERIVE_PARAMS">
      <summary>
            Provides the parameters to the CKM_X9_42_DH_DERIVE key derivation mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH1_DERIVE_PARAMS.Kdf">
      <summary>
            Key derivation function used on the shared secret value 
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH1_DERIVE_PARAMS.OtherInfoLen">
      <summary>
            Length in bytes of the other info
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH1_DERIVE_PARAMS.OtherInfo">
      <summary>
            Some data shared between the two parties
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH1_DERIVE_PARAMS.PublicDataLen">
      <summary>
            Length in bytes of the other party's X9.42 Diffie-Hellman public key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH1_DERIVE_PARAMS.PublicData">
      <summary>
            Pointer to other party's X9.42 Diffie-Hellman public key value
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.X9_42_DH2_DERIVE_PARAMS">
      <summary>
            Provides the parameters to the CKM_X9_42_DH_HYBRID_DERIVE and CKM_X9_42_MQV_DERIVE key derivation mechanisms
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH2_DERIVE_PARAMS.Kdf">
      <summary>
            Key derivation function used on the shared secret value 
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH2_DERIVE_PARAMS.OtherInfoLen">
      <summary>
            Length in bytes of the other info
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH2_DERIVE_PARAMS.OtherInfo">
      <summary>
            Some data shared between the two parties
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH2_DERIVE_PARAMS.PublicDataLen">
      <summary>
            Length in bytes of the other party's first X9.42 Diffie-Hellman public key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH2_DERIVE_PARAMS.PublicData">
      <summary>
            Pointer to other party's first X9.42 Diffie-Hellman public key value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH2_DERIVE_PARAMS.PrivateDataLen">
      <summary>
            Length in bytes of the second X9.42 Diffie-Hellman private key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH2_DERIVE_PARAMS.PrivateData">
      <summary>
            Key handle for second X9.42 Diffie-Hellman private key value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH2_DERIVE_PARAMS.PublicDataLen2">
      <summary>
            Length in bytes of the other party's second X9.42 Diffie-Hellman public key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_DH2_DERIVE_PARAMS.PublicData2">
      <summary>
            Pointer to other party's second X9.42 Diffie-Hellman public key value
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Parameters.X9_42_MQV_DERIVE_PARAMS">
      <summary>
            Provides the parameters to the CKM_X9_42_MQV_DERIVE key derivation mechanism
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_MQV_DERIVE_PARAMS.Kdf">
      <summary>
            Key derivation function used on the shared secret value 
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_MQV_DERIVE_PARAMS.OtherInfoLen">
      <summary>
            Length in bytes of the other info
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_MQV_DERIVE_PARAMS.OtherInfo">
      <summary>
            Some data shared between the two parties
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_MQV_DERIVE_PARAMS.PublicDataLen">
      <summary>
            Length in bytes of the other party's first X9.42 Diffie-Hellman public key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_MQV_DERIVE_PARAMS.PublicData">
      <summary>
            Pointer to other party's first X9.42 Diffie-Hellman public key value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_MQV_DERIVE_PARAMS.PrivateDataLen">
      <summary>
            Length in bytes of the second X9.42 Diffie-Hellman private key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_MQV_DERIVE_PARAMS.PrivateData">
      <summary>
            Key handle for second X9.42 Diffie-Hellman private key value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_MQV_DERIVE_PARAMS.PublicDataLen2">
      <summary>
            Length in bytes of the other party's second X9.42 Diffie-Hellman public key
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_MQV_DERIVE_PARAMS.PublicData2">
      <summary>
            Pointer to other party's second X9.42 Diffie-Hellman public key value
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Parameters.X9_42_MQV_DERIVE_PARAMS.PublicKey">
      <summary>
            Handle to the first party's ephemeral public key
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.INCryptokiMngd">
      <summary>
            Interface to Native Cryptoki
            </summary>
            31/05/2010
        </member>
    <member name="M:Cryptware.NCryptoki.INCryptokiMngd.Attach2NativeCryptoki(System.String,System.String,System.String)">
      <summary>
            Attach2s the native cryptoki.
            </summary>
      <param name="strCryptokiLib">The STR cryptoki lib.</param>
      <returns>
      </returns>
            31/05/2010
        </member>
    <member name="M:Cryptware.NCryptoki.INCryptokiMngd.Detach">
      <summary>
            Detaches this instance.
            </summary>
      <returns>
      </returns>
            31/05/2010
        </member>
    <member name="M:Cryptware.NCryptoki.INCryptokiMngd.C_Initialize(System.Boolean)">
      <summary>
            Initialize.
            </summary>
      <returns>
      </returns>
            31/05/2010
        </member>
    <member name="M:Cryptware.NCryptoki.INCryptokiMngd.C_Finalize(System.IntPtr)">
      <summary>
            Finalize.
            </summary>
      <param name="ptr">The PTR.</param>
      <returns>
      </returns>
            31/05/2010
        </member>
    <member name="M:Cryptware.NCryptoki.INCryptokiMngd.C_GetInfo(Cryptware.NCryptoki.CryptokiInfo)">
      <summary>
            get info.
            </summary>
      <param name="pInfo">The info.</param>
      <returns>
      </returns>
            31/05/2010
        </member>
    <member name="M:Cryptware.NCryptoki.INCryptokiMngd.C_GetSlotList(System.Boolean,System.Collections.Generic.ICollection{Cryptware.NCryptoki.Slot})">
      <summary>
            Get slot list.
            </summary>
      <param name="tokenPresent">if set to <c>true</c> [token present].</param>
      <param name="slotList">The slot list.</param>
      <returns>
      </returns>
            31/05/2010
        </member>
    <member name="M:Cryptware.NCryptoki.INCryptokiMngd.C_GetSlotInfo(System.Int32,Cryptware.NCryptoki.SlotInfo)">
      <summary>
            Get slot info.
            </summary>
      <param name="slotID">The slot ID.</param>
      <param name="info">The info.</param>
      <returns>
      </returns>
            31/05/2010
        </member>
    <member name="T:Cryptware.NCryptoki.CryptokiCollection">
      <summary>
            Class for all collection managed by NCryptoki
            <br />
            All methods in NCryptoki that take or return a collection use CryptokiCollection object 
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiCollection.#ctor">
      <summary>
            CryptokiCollection public constructor
            </summary>
      <remarks>Creates an empty CryptokiCollection object</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiCollection.Add(System.Object)">
      <summary>
            Add an item in this CryptokiCollection object
            </summary>
      <remarks>Add an item in this CryptokiCollection object</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiCollection.Get(System.Int32)">
      <summary>
            Gets the specified object
            </summary>
      <remarks>
            Gets the specified object
            </remarks>
      <param name="idx">Index of the object to get</param>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiCollection.Clear">
      <summary>
            Clears this CryptokiCollection object
            </summary>
      <remarks>Clears this CryptokiCollection object</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiCollection.Contains(System.Object)">
      <summary>
             Determines if the given object is contained in this CryptokiCollection object
             </summary>
      <param name="obj">Object to search for</param>
      <remarks>true if the given object is contained in this CryptokiCollection object</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiCollection.IndexOf(System.Object)">
      <summary>
             Searches for the given object in this CryptokiCollection object
             </summary>
      <param name="obj">Object to search for</param>
      <remarks>Returns the index of the given object in this CryptokiCollection object or -1 if the object is not found</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiCollection.Insert(System.Int32,System.Object)">
      <summary>
             Inserts the given object in this CryptokiCollection object at the given index
             </summary>
      <param name="index">Index where the object must be inserted</param>
      <param name="obj">Object to search for</param>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiCollection.Remove(System.Object)">
      <summary>
             Removes the first occurence of the given object in this CryptokiCollection object
             </summary>
      <param name="obj">Object to remove</param>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiCollection.RemoveAt(System.Int32)">
      <summary>
             Removes the object in this CryptokiCollection object at the given index
             </summary>
      <param name="index">Index of the object to remove</param>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the content of this CryptokiCollection in the given array starting from the given index
            </summary>
      <param name="array">Destination array</param>
      <param name="arrayIndex">Starting index in the destination array</param>
      <remarks>Not supported in Silverlight version.</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiCollection.GetEnumerator">
      <summary>
             Returns an enumerator for this CryptokiCollection
             </summary>
      <remarks>/// Returns an enumerator for this CryptokiCollection</remarks>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiCollection.Count">
      <summary>
            The number of items in this CryptokiCollection object
            </summary>
      <remarks>Returns the number of items in this CryptokiCollection object</remarks>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiCollection.Item(System.Int32)">
      <summary>
            Gets the specified object
            </summary>
      <remarks>
            Gets the specified object
            </remarks>
      <param name="idx">Index of the object to get</param>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiCollection.IsFixedSize">
      <summary>
             Determines if this CryptokiCollection has fixed size
             </summary>
      <remarks>Returns false</remarks>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiCollection.IsReadOnly">
      <summary>
             Determines if this CryptokiCollection is read only
             </summary>
      <remarks>Returns false</remarks>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiCollection.IsSynchronized">
      <summary>
             Determines if this CryptokiCollection is synchonized
             </summary>
      <remarks>Returns true if this CryptokiCollection is synchonized</remarks>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize this CryptokiCollection object
             </summary>
      <remarks>Not supported in Silvelight version</remarks>
    </member>
    <member name="T:Cryptware.NCryptoki.ICryptoki">
      <summary>
            Cryptoki Interface
            </summary>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ICryptoki.Attach(System.String)">
      <summary>
            Attaches the specified cryptokilib.
            </summary>
      <param name="cryptokilib">The cryptokilib.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ICryptoki.SetLicenseInfo(System.String,System.String)">
      <summary>
            Sets the license info 
            </summary>
      <remarks>
      </remarks>
      <param name="licensee">The Licensee</param>
      <param name="productKey">The Produck Key</param>
    </member>
    <member name="M:Cryptware.NCryptoki.ICryptoki.Detach">
      <summary>
            Detaches this instance.
            </summary>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ICryptoki.Finalize(System.IntPtr)">
      <summary>
            Finalizes the specified PTR.
            </summary>
      <param name="ptr">The PTR.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ICryptoki.Initialize">
      <summary>
            Initializes this instance.
            </summary>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ICryptoki.WaitForSlotEvent(System.Int32)">
      <summary>
            Waits for slot event.
            </summary>
      <param name="flags">The flags.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICryptoki.ActiveSlots">
      <summary>
            Gets the active slots.
            </summary>
      <value>The active slots.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICryptoki.Info">
      <summary>
            Gets the info.
            </summary>
      <value>The info.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICryptoki.Slots">
      <summary>
            Gets the slots.
            </summary>
      <value>The slots.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.ICryptokiCollection">
      <summary>
            CryptokiCollection Interface
            </summary>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.ICryptokiInfo">
      <summary>
            Cryptoki info Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICryptokiInfo.Flags">
      <summary>
            Gets or sets the flags.
            </summary>
      <value>The flags.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICryptokiInfo.LibDescription">
      <summary>
            Gets or sets the lib description.
            </summary>
      <value>The lib description.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICryptokiInfo.LibVersion">
      <summary>
            Gets or sets the lib version.
            </summary>
      <value>The lib version.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICryptokiInfo.ManufacturerID">
      <summary>
            Gets or sets the manufacturer ID.
            </summary>
      <value>The manufacturer ID.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ICryptokiInfo.Version">
      <summary>
            Gets or sets the version.
            </summary>
      <value>The version.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.ICryptokiObjects">
      <summary>
            CryptokiObjects Interface
            </summary>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ICryptokiObjects.Create(Cryptware.NCryptoki.CryptokiCollection)">
      <summary>
            Creates the specified att list.
            </summary>
      <param name="attList">The att list.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ICryptokiObjects.Destroy(Cryptware.NCryptoki.CryptokiObject)">
      <summary>
            Destroys the specified obj.
            </summary>
      <param name="obj">The obj.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ICryptokiObjects.Find(Cryptware.NCryptoki.CryptokiCollection,System.Int32)">
      <summary>
            Finds the specified att list.
            </summary>
      <param name="attList">The att list.</param>
      <param name="maxCount">The max count.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IData">
      <summary>
            Data Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IData.DataValue">
      <summary>
            Gets the data value.
            </summary>
      <value>The data value.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IDHPrivateKey">
      <summary>
            DHPrivateKey Intercace
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDHPrivateKey.Base">
      <summary>
            Gets the base.
            </summary>
      <value>The base.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDHPrivateKey.Prime">
      <summary>
            Gets the prime.
            </summary>
      <value>The prime.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDHPrivateKey.KeyValue">
      <summary>
            Gets the key value.
            </summary>
      <value>The key value.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDHPrivateKey.ValueBits">
      <summary>
            Gets the value bits.
            </summary>
      <value>The value bits.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IDHPublicKey">
      <summary>
            DHPublicKey Intercace
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDHPublicKey.Base">
      <summary>
            Gets the base.
            </summary>
      <value>The base.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDHPublicKey.Prime">
      <summary>
            Gets the prime.
            </summary>
      <value>The prime.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDHPublicKey.KeyValue">
      <summary>
            Gets the key value.
            </summary>
      <value>The key value.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IDomainParameters">
      <summary>
            DomainParameter Intercace
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDomainParameters.Base">
      <summary>
            Gets the base.
            </summary>
      <value>The base.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDomainParameters.KeyType">
      <summary>
            Gets the type of the key.
            </summary>
      <value>The type of the key.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDomainParameters.Local">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IDomainParameters" /> is local.
            </summary>
      <value>
        <c>true</c> if local; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDomainParameters.Prime">
      <summary>
            Gets the prime.
            </summary>
      <value>The prime.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDomainParameters.PrimeBits">
      <summary>
            Gets the prime bits.
            </summary>
      <value>The prime bits.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IDSAPrivateKey">
      <summary>
            DSAPrivateKey Intercace
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDSAPrivateKey.Base">
      <summary>
            Gets the base.
            </summary>
      <value>The base.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDSAPrivateKey.Prime">
      <summary>
            Gets the prime.
            </summary>
      <value>The prime.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDSAPrivateKey.SubPrime">
      <summary>
            Gets the sub prime.
            </summary>
      <value>The sub prime.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDSAPrivateKey.KeyValue">
      <summary>
            Gets the key value.
            </summary>
      <value>The key value.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IDSAPublicKey">
      <summary>
            DSAPublicKey Intercace
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDSAPublicKey.Base">
      <summary>
            Gets the base.
            </summary>
      <value>The base.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDSAPublicKey.Prime">
      <summary>
            Gets the prime.
            </summary>
      <value>The prime.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDSAPublicKey.SubPrime">
      <summary>
            Gets the sub prime.
            </summary>
      <value>The sub prime.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IDSAPublicKey.KeyValue">
      <summary>
            Gets the key value.
            </summary>
      <value>The key value.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IECPrivateKey">
      <summary>
            ECPrivateKey Intercace
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IECPrivateKey.ECParameters">
      <summary>
            Gets the EC parameters.
            </summary>
      <value>The EC parameters.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IECPrivateKey.KeyValue">
      <summary>
            Gets the key value.
            </summary>
      <value>The key value.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IECPublicKey">
      <summary>
            ECPublicKey Intercace
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IECPublicKey.ECParameters">
      <summary>
            Gets the EC parameters.
            </summary>
      <value>The EC parameters.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IECPublicKey.ECPoint">
      <summary>
            Gets the EC point.
            </summary>
      <value>The EC point.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IKey">
      <summary>
            Key Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IKey.Derive">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IKey" /> is derive.
            </summary>
      <value>
        <c>true</c> if derive; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IKey.EndDate">
      <summary>
            Gets the end date.
            </summary>
      <value>The end date.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IKey.ID">
      <summary>
            Gets the ID.
            </summary>
      <value>The ID.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IKey.KeyGenMechanismType">
      <summary>
            Gets the type of the key gen mechanism.
            </summary>
      <value>The type of the key gen mechanism.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IKey.KeyGenMechanismTypeName">
      <summary>
            Gets the name of the key gen mechanism type.
            </summary>
      <value>The name of the key gen mechanism type.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IKey.KeyTypeName">
      <summary>
            Gets the name of the key type.
            </summary>
      <value>The name of the key type.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IKey.Local">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IKey" /> is local.
            </summary>
      <value>
        <c>true</c> if local; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IKey.StartDate">
      <summary>
            Gets the start date.
            </summary>
      <value>The start date.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IKey.KeyType">
      <summary>
            Gets the type of the key.
            </summary>
      <value>The type of the key.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IMechanism">
      <summary>
            Mechanism Interface
            </summary>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.IMechanism.Set(System.Int32,System.Object)">
      <summary>
            Sets the specified type.
            </summary>
      <param name="type">The type.</param>
      <param name="param">The param.</param>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IMechanism.Parameter">
      <summary>
            Gets or sets the parameter.
            </summary>
      <value>The parameter.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IMechanism.MechanismType">
      <summary>
            Gets or sets the type of the mechanism.
            </summary>
      <value>The type of the mechanism.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IMechanism.MechanismName">
      <summary>
            Gets the name of the mechanism.
            </summary>
      <value>The name of the mechanism.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IMechanismInfo">
      <summary>
            MechanismInfo Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IMechanismInfo.Flags">
      <summary>
            Gets or sets the flags.
            </summary>
      <value>The flags.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IMechanismInfo.MaxKeySize">
      <summary>
            Gets or sets the size of the max key.
            </summary>
      <value>The size of the max key.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IMechanismInfo.MinKeySize">
      <summary>
            Gets or sets the size of the min key.
            </summary>
      <value>The size of the min key.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IMechanismInfo.MechanismType">
      <summary>
            Gets or sets the type of the mechanism.
            </summary>
      <value>The type of the mechanism.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IMechanismInfo.MechanismName">
      <summary>
            Gets the name of the mechanism.
            </summary>
      <value>The name of the mechanism.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IMechanismList">
      <summary>
            MechanismList Interface
            </summary>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.IMechanismList.Contains(System.Int32)">
      <summary>
            Determines whether [contains] [the specified type].
            </summary>
      <param name="type">The type.</param>
      <returns>
        <c>true</c> if [contains] [the specified type]; otherwise, <c>false</c>.
            </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.IMechanismList.FindMechanism(System.Int32)">
      <summary>
            Finds the mechanism.
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IMechanismList.Count">
      <summary>
            Gets the count.
            </summary>
      <value>The count.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IPrivateKey">
      <summary>
            PrivateKey Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPrivateKey.AlwaysSensitive">
      <summary>
            Gets a value indicating whether [always sensitive].
            </summary>
      <value>
        <c>true</c> if [always sensitive]; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPrivateKey.Decrypt">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IPrivateKey" /> is decrypt.
            </summary>
      <value>
        <c>true</c> if decrypt; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPrivateKey.Extractable">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IPrivateKey" /> is extractable.
            </summary>
      <value>
        <c>true</c> if extractable; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPrivateKey.NeverExtractable">
      <summary>
            Gets a value indicating whether [never extractable].
            </summary>
      <value>
        <c>true</c> if [never extractable]; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPrivateKey.Sensitive">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IPrivateKey" /> is sensitive.
            </summary>
      <value>
        <c>true</c> if sensitive; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPrivateKey.Sign">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IPrivateKey" /> is sign.
            </summary>
      <value>
        <c>true</c> if sign; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPrivateKey.SignRecover">
      <summary>
            Gets a value indicating whether [sign recover].
            </summary>
      <value>
        <c>true</c> if [sign recover]; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPrivateKey.Subject">
      <summary>
            Gets the subject.
            </summary>
      <value>The subject.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPrivateKey.Unwrap">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IPrivateKey" /> is unwrap.
            </summary>
      <value>
        <c>true</c> if unwrap; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IPublicKey">
      <summary>
            PublicKey Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPublicKey.Encrypt">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IPublicKey" /> is encrypt.
            </summary>
      <value>
        <c>true</c> if encrypt; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPublicKey.Subject">
      <summary>
            Gets the subject.
            </summary>
      <value>The subject.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPublicKey.Verify">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IPublicKey" /> is verify.
            </summary>
      <value>
        <c>true</c> if verify; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPublicKey.VerifyRecover">
      <summary>
            Gets a value indicating whether [verify recover].
            </summary>
      <value>
        <c>true</c> if [verify recover]; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IPublicKey.Wrap">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.IPublicKey" /> is wrap.
            </summary>
      <value>
        <c>true</c> if wrap; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IRSAPrivateKey">
      <summary>
            RSAPrivateKey Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IRSAPrivateKey.Coefficient">
      <summary>
            Gets the coefficient.
            </summary>
      <value>The coefficient.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IRSAPrivateKey.Exponent1">
      <summary>
            Gets the exponent1.
            </summary>
      <value>The exponent1.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IRSAPrivateKey.Exponent2">
      <summary>
            Gets the exponent2.
            </summary>
      <value>The exponent2.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IRSAPrivateKey.Modulus">
      <summary>
            Gets the modulus.
            </summary>
      <value>The modulus.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IRSAPrivateKey.Prime1">
      <summary>
            Gets the prime1.
            </summary>
      <value>The prime1.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IRSAPrivateKey.Prime2">
      <summary>
            Gets the prime2.
            </summary>
      <value>The prime2.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IRSAPrivateKey.PrivateExponent">
      <summary>
            Gets the private exponent.
            </summary>
      <value>The private exponent.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IRSAPrivateKey.PublicExponent">
      <summary>
            Gets the public exponent.
            </summary>
      <value>The public exponent.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IRSAPublicKey">
      <summary>
            RSAPublicKey Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IRSAPublicKey.Modulus">
      <summary>
            Gets the modulus.
            </summary>
      <value>The modulus.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IRSAPublicKey.ModulusBit">
      <summary>
            Gets the modulus bit.
            </summary>
      <value>The modulus bit.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IRSAPublicKey.PublicExponent">
      <summary>
            Gets the public exponent.
            </summary>
      <value>The public exponent.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.ISecretKey">
      <summary>
            SecretKey Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISecretKey.Encrypt">
      <summary>
            Gets a value indicating whether this <see cref="T:Cryptware.NCryptoki.ISecretKey" /> is encrypt.
            </summary>
      <value>
        <c>true</c> if encrypt; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISecretKey.KeyValue">
      <summary>
            Gets the key value.
            </summary>
      <value>The key value.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.ISession">
      <summary>
            Session Interface
            </summary>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.Close">
      <summary>
            Closes this instance.
            </summary>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.Decrypt(System.Byte[])">
      <summary>
            Decrypts the specified data.
            </summary>
      <param name="data">The data.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.DecryptDigestUpdate(System.Byte[])">
      <summary>
            Decrypts the digest update.
            </summary>
      <param name="data">The data.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.DecryptFinal">
      <summary>
            Decrypts the final.
            </summary>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.DecryptInit(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key)">
      <summary>
            Decrypts the init.
            </summary>
      <param name="mech">The mech.</param>
      <param name="key">The key.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.DecryptVerifyUpdate(System.Byte[])">
      <summary>
            Decrypts the verify update.
            </summary>
      <param name="data">The data.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.Digest(System.Byte[])">
      <summary>
            Digests the specified data.
            </summary>
      <param name="data">The data.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.DigestEncryptUpdate(System.Byte[],Cryptware.NCryptoki.Key)">
      <summary>
            Digests the encrypt update.
            </summary>
      <param name="data">The data.</param>
      <param name="key">The key.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.DigestFinal">
      <summary>
            Digests the final.
            </summary>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.DigestInit(Cryptware.NCryptoki.Mechanism)">
      <summary>
            Digests the init.
            </summary>
      <param name="mech">The mech.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.DigestKey(Cryptware.NCryptoki.Key)">
      <summary>
            Digests the key.
            </summary>
      <param name="key">The key.</param>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.DigestUpdate(System.Byte[])">
      <summary>
            Digests the update.
            </summary>
      <param name="data">The data.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.Encrypt(System.Byte[])">
      <summary>
            Encrypts the specified data.
            </summary>
      <param name="data">The data.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.EncryptFinal">
      <summary>
            Encrypts the final.
            </summary>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.EncryptInit(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key)">
      <summary>
            Encrypts the init.
            </summary>
      <param name="mech">The mech.</param>
      <param name="key">The key.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.EncryptUpdate(System.Byte[])">
      <summary>
            Encrypts the update.
            </summary>
      <param name="data">The data.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.GenerateKey(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.CryptokiCollection)">
      <summary>
            Generates the key.
            </summary>
      <param name="mech">The mech.</param>
      <param name="attList">The att list.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.GenerateKeyPair(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.CryptokiCollection,Cryptware.NCryptoki.CryptokiCollection)">
      <summary>
            Generates the key pair.
            </summary>
      <param name="mech">The mech.</param>
      <param name="attListPub">The att list pub.</param>
      <param name="attListPri">The att list pri.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.GenerateRandom(System.Int32)">
      <summary>
            Generates the random.
            </summary>
      <param name="len">The len.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.GetFunctionStatus">
      <summary>
            Gets the function status.
            </summary>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.GetOperationState">
      <summary>
            Gets the state of the operation.
            </summary>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.Login(System.Int32,System.String)">
      <summary>
            Logins the specified user type.
            </summary>
      <param name="userType">Type of the user.</param>
      <param name="pin">The pin.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.Login(System.Int32,System.Byte[])">
      <summary>
            Logins the specified user type.
            </summary>
      <param name="userType">Type of the user.</param>
      <param name="pin">The pin.</param>
      <returns>
      </returns>
            01/12/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.Logout">
      <summary>
            Logouts this instance.
            </summary>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.InitPIN(System.String)">
      <summary>
            Inits the PIN.
            </summary>
      <param name="pin">The pin.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.InitPIN(System.Byte[])">
      <summary>
            Inits the PIN.
            </summary>
      <param name="pin">The pin.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Cryptware.NCryptoki.ISession.SeedRandom(System.Byte[])">
      <summary>
            Seeds the random.
            </summary>
      <param name="seed">The seed.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.SetOperationState(System.Byte[],Cryptware.NCryptoki.Key,Cryptware.NCryptoki.Key)">
      <summary>
            Sets the state of the operation.
            </summary>
      <param name="data">The data.</param>
      <param name="encKey">The enc key.</param>
      <param name="autKey">The aut key.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.SetPIN(System.String,System.String)">
      <summary>
            Sets the PIN.
            </summary>
      <param name="oldPin">The old pin.</param>
      <param name="newPin">The new pin.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.SetPIN(System.Byte[],System.Byte[])">
      <summary>
            Sets the PIN.
            </summary>
      <param name="oldPin">The old pin.</param>
      <param name="newPin">The new pin.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Cryptware.NCryptoki.ISession.Sign(System.Byte[])">
      <summary>
            Signs the specified data.
            </summary>
      <param name="data">The data.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.SignEncryptUpdate(System.Byte[])">
      <summary>
            Signs the encrypt update.
            </summary>
      <param name="data">The data.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.SignFinal">
      <summary>
            Signs the final.
            </summary>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.SignInit(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key)">
      <summary>
            Signs the init.
            </summary>
      <param name="mech">The mech.</param>
      <param name="key">The key.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.SignRecover(System.Byte[])">
      <summary>
            Signs the recover.
            </summary>
      <param name="data">The data.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.SignRecoverInit(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key)">
      <summary>
            Signs the recover init.
            </summary>
      <param name="mech">The mech.</param>
      <param name="key">The key.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.SignUpdate(System.Byte[])">
      <summary>
            Signs the update.
            </summary>
      <param name="data">The data.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.UnwrapKey(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key,System.Byte[],Cryptware.NCryptoki.CryptokiCollection)">
      <summary>
            Unwraps the key.
            </summary>
      <param name="mech">The mech.</param>
      <param name="unwrappingKey">The unwrapping key.</param>
      <param name="wrappedKey">The wrapped key.</param>
      <param name="attList">The att list.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.Verify(System.Byte[],System.Byte[])">
      <summary>
            Verifies the specified data.
            </summary>
      <param name="data">The data.</param>
      <param name="signature">The signature.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.VerifyFinal(System.Byte[])">
      <summary>
            Verifies the final.
            </summary>
      <param name="signature">The signature.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.VerifyInit(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key)">
      <summary>
            Verifies the init.
            </summary>
      <param name="mech">The mech.</param>
      <param name="key">The key.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.VerifyRecover(System.Byte[],System.Byte[])">
      <summary>
            Verifies the recover.
            </summary>
      <param name="data">The data.</param>
      <param name="signature">The signature.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.VerifyRecoverInit(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key)">
      <summary>
            Verifies the recover init.
            </summary>
      <param name="mech">The mech.</param>
      <param name="key">The key.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.VerifyUpdate(System.Byte[])">
      <summary>
            Verifies the update.
            </summary>
      <param name="data">The data.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISession.WrapKey(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key,Cryptware.NCryptoki.Key)">
      <summary>
            Wraps the key.
            </summary>
      <param name="mech">The mech.</param>
      <param name="wrappingKey">The wrapping key.</param>
      <param name="keyToWrap">The key to wrap.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISession.Info">
      <summary>
            Gets the info.
            </summary>
      <value>The info.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISession.IsLoggedIn">
      <summary>
            Gets a value indicating whether this instance is logged in.
            </summary>
      <value>
        <c>true</c> if this instance is logged in; otherwise, <c>false</c>.
            </value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISession.IsOpen">
      <summary>
            Gets a value indicating whether this instance is open.
            </summary>
      <value>
        <c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISession.Objects">
      <summary>
            Gets the objects.
            </summary>
      <value>The objects.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISession.Token">
      <summary>
            Gets the token where this session is open
            </summary>
      <value>The token.</value>
            01/11/2010
        </member>
    <member name="T:Cryptware.NCryptoki.ISessionInfo">
      <summary>
            SessionInfo interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISessionInfo.DeviceError">
      <summary>
            Gets or sets the device error.
            </summary>
      <value>The device error.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISessionInfo.Flags">
      <summary>
            Gets or sets the flags.
            </summary>
      <value>The flags.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISessionInfo.IsLoggedIn">
      <summary>
            Gets a value indicating whether this instance is logged in.
            </summary>
      <value>
        <c>true</c> if this instance is logged in; otherwise, <c>false</c>.
            </value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISessionInfo.SlotID">
      <summary>
            Gets or sets the slot ID.
            </summary>
      <value>The slot ID.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISessionInfo.State">
      <summary>
            Gets or sets the state.
            </summary>
      <value>The state.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.ISlot">
      <summary>
            Slot Interface
            </summary>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISlot.CloseAllSessions">
      <summary>
            Closes all sessions.
            </summary>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISlot.InitToken(System.String,System.String)">
      <summary>
            Inits the token.
            </summary>
      <param name="pin">The pin.</param>
      <param name="label">The label.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISlot.InitToken(System.Byte[],System.String)">
      <summary>
            Inits the token.
            </summary>
      <param name="pin">The pin.</param>
      <param name="label">The label.</param>
      <returns>
      </returns>
            31/08/2010        
        </member>
    <member name="P:Cryptware.NCryptoki.ISlot.Info">
      <summary>
            Gets the info.
            </summary>
      <value>The info.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISlot.IsTokenPresent">
      <summary>
            Gets a value indicating whether this instance is token present.
            </summary>
      <value>
        <c>true</c> if this instance is token present; otherwise, <c>false</c>.
            </value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISlot.SlotID">
      <summary>
            Gets the slot ID.
            </summary>
      <value>The slot ID.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISlot.Token">
      <summary>
            Gets the token.
            </summary>
      <value>The token.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.ISlotInfo">
      <summary>
            SlotInfo Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISlotInfo.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>The description.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISlotInfo.FirmwareVersion">
      <summary>
            Gets or sets the firmware version.
            </summary>
      <value>The firmware version.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISlotInfo.Flags">
      <summary>
            Gets or sets the flags.
            </summary>
      <value>The flags.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISlotInfo.HardwareVersion">
      <summary>
            Gets or sets the hardware version.
            </summary>
      <value>The hardware version.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISlotInfo.IsHardwareSlot">
      <summary>
            Gets a value indicating whether this instance is hardware slot.
            </summary>
      <value>
        <c>true</c> if this instance is hardware slot; otherwise, <c>false</c>.
            </value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISlotInfo.IsRemovableDevice">
      <summary>
            Gets a value indicating whether this instance is removable device.
            </summary>
      <value>
        <c>true</c> if this instance is removable device; otherwise, <c>false</c>.
            </value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISlotInfo.IsTokenPresent">
      <summary>
            Gets a value indicating whether this instance is token present.
            </summary>
      <value>
        <c>true</c> if this instance is token present; otherwise, <c>false</c>.
            </value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISlotInfo.ManufacturerID">
      <summary>
            Gets or sets the manufacturer ID.
            </summary>
      <value>The manufacturer ID.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.ISlotList">
      <summary>
            SlotList Interface
            </summary>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.ISlotList.GetSlot(System.Int32)">
      <summary>
            Gets the slot.
            </summary>
      <param name="slotID">The slot ID.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ISlotList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Cryptware.NCryptoki.Slot" /> with the specified idx.
            </summary>
      <value>
      </value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IToken">
      <summary>
            Token Interface
            </summary>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.IToken.OpenSession(System.Int32)">
      <summary>
            Opens the session.
            </summary>
      <param name="flags">The flags.</param>
      <returns>
      </returns>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IToken.Info">
      <summary>
            Gets the info.
            </summary>
      <value>The info.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IToken.MechanismList">
      <summary>
            Gets the mechanism list.
            </summary>
      <value>The mechanism list.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IToken.Slot">
      <summary>
            Gets the slot where this token is inserted.
            </summary>
      <value>The slot.</value>
            01/11/2010
        </member>
    <member name="T:Cryptware.NCryptoki.ITokenInfo">
      <summary>
            Token Info Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.FirmwareVersion">
      <summary>
            Gets or sets the firmware version.
            </summary>
      <value>The firmware version.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.Flags">
      <summary>
            Gets or sets the flags.
            </summary>
      <value>The flags.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.FreePrivateMemory">
      <summary>
            Gets or sets the free private memory.
            </summary>
      <value>The free private memory.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.FreePublicMemory">
      <summary>
            Gets or sets the free public memory.
            </summary>
      <value>The free public memory.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.HardwareVersion">
      <summary>
            Gets or sets the hardware version.
            </summary>
      <value>The hardware version.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.Label">
      <summary>
            Gets or sets the label.
            </summary>
      <value>The label.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.ManufacturerID">
      <summary>
            Gets or sets the manufacturer ID.
            </summary>
      <value>The manufacturer ID.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.MaxPINLen">
      <summary>
            Gets or sets the max PIN len.
            </summary>
      <value>The max PIN len.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.MaxRWSessionCount">
      <summary>
            Gets or sets the max RW session count.
            </summary>
      <value>The max RW session count.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.MaxSessionCount">
      <summary>
            Gets or sets the max session count.
            </summary>
      <value>The max session count.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.MinPINLen">
      <summary>
            Gets or sets the min PIN len.
            </summary>
      <value>The min PIN len.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.Model">
      <summary>
            Gets or sets the model.
            </summary>
      <value>The model.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.RWSessionCount">
      <summary>
            Gets or sets the RW session count.
            </summary>
      <value>The RW session count.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.SerialNumber">
      <summary>
            Gets or sets the serial number.
            </summary>
      <value>The serial number.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.SessionCount">
      <summary>
            Gets or sets the session count.
            </summary>
      <value>The session count.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.TotalPrivateMemory">
      <summary>
            Gets or sets the total private memory.
            </summary>
      <value>The total private memory.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.TotalPublicMemory">
      <summary>
            Gets or sets the total public memory.
            </summary>
      <value>The total public memory.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.ITokenInfo.UTCTime">
      <summary>
            Gets or sets the UTC time.
            </summary>
      <value>The UTC time.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IX509AttributeCertificate">
      <summary>
            X509AttributeCertificate Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IX509AttributeCertificate.ACIssuer">
      <summary>
            Gets the AC issuer.
            </summary>
      <value>The AC issuer.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IX509AttributeCertificate.AttributeTypes">
      <summary>
            Gets the attribute types.
            </summary>
      <value>The attribute types.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IX509AttributeCertificate.Owner">
      <summary>
            Gets the owner.
            </summary>
      <value>The owner.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.IX509Certificate">
      <summary>
            X509Certificate Interface
            </summary>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IX509Certificate.ID">
      <summary>
            Gets the ID.
            </summary>
      <value>The ID.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IX509Certificate.Issuer">
      <summary>
            Gets the issuer.
            </summary>
      <value>The issuer.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.IX509Certificate.Subject">
      <summary>
            Gets the subject.
            </summary>
      <value>The subject.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.KEAPublicKey">
      <summary>
            Wraps a PKCS#11 KEAPublicKey Object 
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.DSAPublicKey">
      <summary>
            Wraps a PKCS#11 DSAPublicKey Object 
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.PublicKey">
      <summary>
            Wraps a PKCS#11 PrivateKey Object 
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Key">
      <summary>
            Wraps a PKCS#11 Key Object 
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.Key.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            30/11/2010
        </member>
    <member name="P:Cryptware.NCryptoki.Key.KeyType">
      <summary>
            Value of this CKA_KEY_TYPE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Key.KeyTypeName">
      <summary>
            Gets the name of the key type.
            </summary>
      <value>The name of the key type.</value>
            31/05/2010
        </member>
    <member name="P:Cryptware.NCryptoki.Key.KeyGenMechanismType">
      <summary>
            Value of this CKA_KEY_GEN_MECHANISM attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Key.KeyGenMechanismTypeName">
      <summary>
            Gets the name of the key gen mechanism type.
            </summary>
      <value>The name of the key gen mechanism type.</value>
            31/05/2010
        </member>
    <member name="P:Cryptware.NCryptoki.Key.ID">
      <summary>
            Value of this CKA_ID attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Key.StartDate">
      <summary>
            Value of this CKA_START_DATE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Key.EndDate">
      <summary>
            Value of this CKA_END_DATE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Key.Derive">
      <summary>
            Value of this CKA_DERIVE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Key.Local">
      <summary>
            Value of this CKA_LOCAL attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PublicKey.Subject">
      <summary>
            Value of this CKA_SUBJECT attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PublicKey.Encrypt">
      <summary>
            Value of this CKA_ENCRYPT attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PublicKey.Verify">
      <summary>
            Value of this CKA_VERIFY attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PublicKey.VerifyRecover">
      <summary>
            Value of this CKA_VERIFY_RECOVER attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PublicKey.Wrap">
      <summary>
            Value of this CKA_WRAP attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PublicKey.WrapTemplate">
      <summary>
            Value of this CKA_WRAP_TEMPLATE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DSAPublicKey.Prime">
      <summary>
            Value of this CKA_PRIME attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DSAPublicKey.SubPrime">
      <summary>
            Value of this CKA_SUBPRIME attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DSAPublicKey.Base">
      <summary>
            Value of this CKA_BASE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DSAPublicKey.KeyValue">
      <summary>
            Value of this CKA_VALUE attribute
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CKA_USAGE_COUNT">
            Vendor defined CKA_ Attributes.
        </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CKM_DSA_SHA1_PKCS">
            Vendor defined CKM_ Mechanisms.
        </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CKM_VISA_CVV">
            Verified by Visa CVV calculation mechanism. Only valid for C_SignInit= (); and
            C_VerifyInit= (); operations. 
        </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CKM_SECRET_SHARE_WITH_ATTRIBUTES">
            N of M secret share mechanism 
        </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CKM_SECRET_RECOVER_WITH_ATTRIBUTES">
            N of M secret recovery mechanism 
        </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CKM_PKCS12_PBE_EXPORT">
            PBE based PKCS#12 Export mechanism 
        </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CKM_PKCS12_PBE_IMPORT">
            PBE based PKCS#12 Import mechanism 
        </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CKM_ECIES">
            EC IES mechanism = (X9.63); 
        </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CK_TIMESTAMP_FORMAT_ERACOM">
            Mechanism parameters for CKM_SHA1_RSA_PKCS_TIMESTAMP.
        </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CKF_PKCS_7_INCLUDE_CERTS_AND_CRLS">
            Mechanism parameters for PKCS7 mechanisms.
        </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CKDHP_STANDARD">
            EC DH primitives 
        </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CKES_XOR">
            Inner encryption schemes 
        </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CKMS_HMAC_SHA1">
            MAC schemes 
        </member>
    <member name="F:Cryptware.NCryptoki.SafeNet.CKR_ERACOM_ERROR">
            Vendor defined CKR_ error codes.
        </member>
    <member name="T:Cryptware.NCryptoki.Utils">
      <summary>
            Utility class
            </summary>
            25/11/2010
        </member>
    <member name="M:Cryptware.NCryptoki.Utils.ShowCertificate(Cryptware.NCryptoki.Certificate)">
      <summary>
            Shows the certificate.
            </summary>
      <param name="cert">The cert.</param>
      <remarks>Not available in Silverlight version</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.Utils.ShowCertificate(System.Byte[])">
      <summary>
            Shows the certificate.
            </summary>
      <param name="certRaw">The cert raw.</param>
      <remarks>Not available in Silverlight version</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.Utils.ShowCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
            Shows the certificate.
            </summary>
      <param name="cert">The cert.</param>
      <remarks>Not available in Silverlight version</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.Utils.ReadPFX(System.Byte[],System.String)">
      <summary>
            Reads the PFX from a raw byte array
            </summary>
      <param name="rawPFX">The raw PFX.</param>
      <param name="password">The password.</param>
      <returns>An X509CertificateV2 object containing both public and private key and the related certificate</returns>
      <remarks>Not available in Silverlight version</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.Utils.ReadPFX(System.String,System.String)">
      <summary>
            Reads the PFX from a file.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="password">The password.</param>
      <returns>An X509CertificateV2 object containing both public and private key and the related certificate</returns>
      <remarks>Not available in Silverlight version</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.Utils.ReadCertificate(System.String)">
      <summary>
            Reads the certificate from a file
            </summary>
      <param name="filePath">The file path.</param>
      <returns>An X509CertificateV2 object containing both public and private key and the related certificate</returns>
      <remarks>Not available in Silverlight version</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.Utils.ConvertCertificate(Cryptware.NCryptoki.X509Certificate)">
      <summary>
            Converts the certificate fom PKCS#11 to Microsoft X509Certificate2.
            </summary>
      <param name="cert">The certificate.</param>
      <returns>An X509CertificateV2 object</returns>
      <remarks>Not available in Silverlight version</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.Utils.ImportCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2,Cryptware.NCryptoki.Session,System.Byte[],System.String)">
      <summary>
            Imports the certificate in the token.
            </summary>
      <param name="cert">The certificate.</param>
      <param name="session">The session.</param>
      <param name="id">The id.</param>
      <param name="label">The label.</param>
      <returns>An X509CertificateV2 object</returns>
      <remarks>Not available in Silverlight version</remarks>
    </member>
    <member name="T:Cryptware.NCryptoki.X942DHPublicKey">
      <summary>
            Wraps a PKCS#11 X942DHPublicKey Object 
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.DHPublicKey">
      <summary>
            Wraps a PKCS#11 DHPublicKey Object 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DHPublicKey.Prime">
      <summary>
            Value of this CKA_PRIME attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DHPublicKey.Base">
      <summary>
            Value of this CKA_BASE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DHPublicKey.KeyValue">
      <summary>
            Value of this CKA_VALUE attribute
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.ECPublicKey">
      <summary>
            Wraps a PKCS#11 ECPublicKey Object 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.ECPublicKey.ECParameters">
      <summary>
            Value of this CKA_ECDSA_PARAMS attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.ECPublicKey.ECPoint">
      <summary>
            Value of this CKA_EC_POINT attribute
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.X942DHPrivateKey">
      <summary>
            Wraps a PKCS#11 X942DHPrivateKey Object 
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.DSAPrivateKey">
      <summary>
            Wraps a PKCS#11 DSAPrivateKey Object 
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.PrivateKey">
      <summary>
            Wraps a PKCS#11 PrivateKey Object 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PrivateKey.Subject">
      <summary>
            Value of this CKA_SUBJECT attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PrivateKey.Decrypt">
      <summary>
            Value of this CKA_DECRYPT attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PrivateKey.Sign">
      <summary>
            Value of this CKA_SIGN attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PrivateKey.SignRecover">
      <summary>
            Value of this CKA_SIGN_RECOVER attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PrivateKey.Sensitive">
      <summary>
            Value of this CKA_SENSITIVE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PrivateKey.Unwrap">
      <summary>
            Value of this CKA_UNWRAP attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PrivateKey.Extractable">
      <summary>
            Value of this CKA_EXTRACTABLE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PrivateKey.AlwaysSensitive">
      <summary>
            Value of this CKA_ALWAYS_SENSITIVE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.PrivateKey.NeverExtractable">
      <summary>
            Value of this CKA_NEVER_EXTRACTABLE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DSAPrivateKey.Prime">
      <summary>
            Value of this CKA_PRIME attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DSAPrivateKey.SubPrime">
      <summary>
            Value of this CKA_SUBPRIME attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DSAPrivateKey.Base">
      <summary>
            Value of this CKA_BASE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DSAPrivateKey.KeyValue">
      <summary>
            Value of this CKA_VALUE attribute
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.KEAPrivateKey">
      <summary>
            Wraps a PKCS#11 KEAPrivateKey Object 
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.DHPrivateKey">
      <summary>
            Wraps a PKCS#11 DHPrivateKey Object 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DHPrivateKey.Prime">
      <summary>
            Value of this Prime value (CKA_PRIME)
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DHPrivateKey.Base">
      <summary>
            Value of this Base value (CKA_BASE)
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DHPrivateKey.KeyValue">
      <summary>
            Value of this Key (CKA_VALUE)
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DHPrivateKey.ValueBits">
      <summary>
            Value of this Key (CKA_VALUE_BITS)
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.ECPrivateKey">
      <summary>
            Wraps a PKCS#11 ECPrivateKey Object 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.ECPrivateKey.ECParameters">
      <summary>
            Value of this CKA_ECDSA_PARAMS attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.ECPrivateKey.KeyValue">
      <summary>
            Value of this CKA_VALUE attribute
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.RSAPublicKey">
      <summary>
            Wraps a PKCS#11 RSAPublicKey Object 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.RSAPublicKey.Modulus">
      <summary>
            Value of this CKA_MODULUS attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.RSAPublicKey.PublicExponent">
      <summary>
            Value of this CKA_PUBLIC_EXPONENT attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.RSAPublicKey.ModulusBit">
      <summary>
            Value of this CKA_MODULUS_BITS attribute
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.RSAPrivateKey">
      <summary>
            Wraps a PKCS#11 RSAPrivateKey Object 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.RSAPrivateKey.Modulus">
      <summary>
            Value of this CKA_MODULUS attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.RSAPrivateKey.PublicExponent">
      <summary>
            Value of this CKA_PUBLIC_EXPONENT attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.RSAPrivateKey.PrivateExponent">
      <summary>
            Value of this CKA_PRIVATE_EXPONENT attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.RSAPrivateKey.Prime1">
      <summary>
            Value of this CKA_PRIME_1 attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.RSAPrivateKey.Prime2">
      <summary>
            Value of this CKA_PRIME_2 attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.RSAPrivateKey.Exponent1">
      <summary>
            Value of this CKA_EXPONENT_1 attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.RSAPrivateKey.Exponent2">
      <summary>
            Value of this CKA_EXPONENT_2 attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.RSAPrivateKey.Coefficient">
      <summary>
            Value of this CKA_COEFFICIENT attribute
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.DomainParameters">
      <summary>
            Wraps a PKCS#11 DomainParameters Object 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DomainParameters.Local">
      <summary>
            Value of this CKA_LOCAL attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DomainParameters.KeyType">
      <summary>
            Value of this CKA_KEY_TYPE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DomainParameters.Prime">
      <summary>
            Value of this CKA_PRIME attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DomainParameters.Base">
      <summary>
            Value of this CKA_BASE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.DomainParameters.PrimeBits">
      <summary>
            Value of this CKA_PRIME_BITS attribute
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.SecretKey">
      <summary>
            Wraps a PKCS#11 SecretKey Object 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SecretKey.Encrypt">
      <summary>
            Value of this CKA_ENCRYPT attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SecretKey.Decrypt">
      <summary>
            Value of this CKA_DECRYPT attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SecretKey.Sign">
      <summary>
            Value of this CKA_DECRYPT attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SecretKey.Verify">
      <summary>
            Value of this CKA_VERIFY attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SecretKey.KeyValue">
      <summary>
            Value of this CKA_VALUE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SecretKey.Sensitive">
      <summary>
            Value of this CKA_SENSITIVE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SecretKey.Unwrap">
      <summary>
            Value of this CKA_UNWRAP attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SecretKey.Extractable">
      <summary>
            Value of this CKA_EXTRACTABLE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SecretKey.AlwaysSensitive">
      <summary>
            Value of this CKA_ALWAYS_SENSITIVE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SecretKey.NeverExtractable">
      <summary>
            Value of this CKA_NEVER_EXTRACTABLE attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SecretKey.Wrap">
      <summary>
            Value of this CKA_WRAP attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SecretKey.WrapTemplate">
      <summary>
            Value of this CKA_WRAP_TEMPLATE attribute
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.CryptokiInfo">
      <summary>
            Wraps a PKCS#11 Info Object 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiInfo.Version">
      <summary>
            PKCS#11 version implemented by the attached cryptoki module
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiInfo.ManufacturerID">
      <summary>
            Manufacturer ID of the attached cryptoki module
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiInfo.Flags">
      <summary>
            Flags of the attached cryptoki module
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiInfo.LibDescription">
      <summary>
            Library description of the attached cryptoki module
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiInfo.LibVersion">
      <summary>
            Library version of the attached cryptoki module
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Cryptoki">
      <summary>
            The main class exposed by NCryptoki library
            </summary>
    </member>
    <member name="F:Cryptware.NCryptoki.Cryptoki.CKF_DONT_BLOCK">
      <summary>
            Flags uses in WaitForSlotEvent to specify that the function shouldn't block.
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.Cryptoki.SetLogFile(System.String)">
      <summary>
            Sets the log file
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.Cryptoki.#ctor">
      <summary>
            Creates an instance of Cryptoki 
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.Cryptoki.#ctor(System.String)">
      <summary>
            Creates an instance of Cryptoki attached to the given native cryptoki library
            </summary>
      <param name="cryptokilib">Full path of the native cryptoki library</param>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">CryptokiException if a native error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Cryptoki.SetLicenseInfo(System.String,System.String)">
      <summary>
            Sets the license info 
            </summary>
      <remarks>
      </remarks>
      <param name="licensee">The Licensee</param>
      <param name="productKey">The Produck Key</param>
    </member>
    <member name="M:Cryptware.NCryptoki.Cryptoki.Attach(System.String)">
      <summary>
            Attaches this Cryptoki object to the given native cryptoki library. It calls LoadLibrary
            </summary>
      <remarks>Attaches this Cryptoki object to the given native cryptoki library</remarks>
      <returns>0 if no error occurs, an error code otherwise.<br />Error code could be a Win32 error took by GetLastError(), such as FILE_NOT_FOUND or a PKCS#11 error <see cref="T:Cryptware.NCryptoki.CryptokiException" /></returns>
      <param name="cryptokilib">Full path of the native cryptoki library</param>
    </member>
    <member name="M:Cryptware.NCryptoki.Cryptoki.Detach">
      <summary>
            Detaches this object from the native cryptoki library. It calls FreeLibrary.
            </summary>
      <remarks>Detaches this Cryptoki object from the native cryptoki library</remarks>
      <returns>0 if no error occurs, an error code otherwise.<br />Error code could be a Win32 error took by GetLastError(), such as FILE_NOT_FOUND or a PKCS#11 error <see cref="T:Cryptware.NCryptoki.CryptokiException" /></returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Cryptoki.Initialize">
      <summary>
            Inizialize this cryptoki object and native cryptoki
            </summary>
      <remarks>
            Initialize initializes the Cryptoki library. 
            Initialize should be the first Cryptoki call made by an application, except for calls to
            What this function actually does is implementation-dependent; 
            typically, it might cause Cryptoki to initialize its internal memory buffers, or any other
            resources it requires.
            If several applications are using Cryptoki, each one should call C_Initialize. Every call
            to Initialize should (eventually) be succeeded by a single call to Finalize. See Section 6.6 of PKCS#11 v.2.20 specifications for more details.
            </remarks>
      <returns>0 if no error occur or a PKCS#11 error otherwise <see cref="T:Cryptware.NCryptoki.CryptokiException" /></returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Cryptoki.Initialize(System.Boolean)">
      <summary>
            Inizialize this cryptoki object and native cryptoki
            </summary>
      <param name="multithreading">Specifies whether the caller will call NCryptoki functions in more threads or not, as specified in PKCS#11 v.2.20 specifications.</param>
      <remarks>
            Initialize initializes the Cryptoki library. 
            Initialize should be the first Cryptoki call made by an application, except for calls to
            What this function actually does is implementation-dependent; 
            typically, it might cause Cryptoki to initialize its internal memory buffers, or any other
            resources it requires.
            If several applications are using Cryptoki, each one should call C_Initialize. Every call
            to Initialize should (eventually) be succeeded by a single call to Finalize. See Section 6.6 of PKCS#11 v.2.20 specifications for more details.
            </remarks>
      <returns>0 if no error occur or a PKCS#11 error otherwise <see cref="T:Cryptware.NCryptoki.CryptokiException" /></returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Cryptoki.Finalize(System.IntPtr)">
      <summary>
            Finalize this cryptoki object and native cryptoki
            </summary>
      <param name="reserved">Reserved paramters</param>
      <remarks>
            Finalize is called to indicate that an application is finished with the Cryptoki library.
            It should be the last Cryptoki call made by an application. The reserved parameter is reserved for future versions; 
            for this version, it should be set to IntPtr.Zero (if Finalize is called with a non-Zero value for reserved, it should return the
            value CKR_ARGUMENTS_BAD). If several applications are using Cryptoki, each one should call Finalize. Each application’s call to Finalize should be preceded by a single call to Initialize; in
            between the two calls, an application can make calls to other Cryptoki functions. See Section 6.6 of PKCS#11 v.20 specifications for more details.        
            </remarks>
      <returns>
            0 if no error occur or a PKCS#11 error otherwise <see cref="T:Cryptware.NCryptoki.CryptokiException" /></returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Cryptoki.Finalize">
      <summary>
            Finalize this cryptoki object and native cryptoki
            </summary>
      <remarks>
            Finalize is called to indicate that an application is finished with the Cryptoki library.
            It should be the last Cryptoki call made by an application. 
            If several applications are using Cryptoki, each one should call Finalize. Each application’s call to Finalize should be preceded by a single call to Initialize; in
            between the two calls, an application can make calls to other Cryptoki functions. See Section 6.6 of PKCS#11 v.20 specifications for more details.        
            </remarks>
      <returns>
            0 if no error occur or a PKCS#11 error otherwise <see cref="T:Cryptware.NCryptoki.CryptokiException" /></returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Cryptoki.WaitForSlotEvent(System.Int32)">
      <summary>
            Wait for a slot event like smart card insertion or removal
            </summary>
      <param name="flags">Flags specifing behaviour: CKF_DONT_BLOCK returns without waiting for a slot event</param>
      <remarks>
            WaitForSlotEvent waits for a slot event, such as token insertion or token removal, to 
            occur. flags determines whether or not the WaitForSlotEvent call blocks (i.e., waits
            for a slot event to occur); 
            At present, the only flag defined for use in the flags argument is CKF_DONT_BLOCK:
            Internally, each Cryptoki application has a flag for each slot which is used to track
            whether or not any unrecognized events involving that slot have occurred. When an
            application initially calls Initialize, every slot’s event flag is cleared. Whenever a slot
            event occurs, the flag corresponding to the slot in which the event occurred is set.
            If WaitForSlotEvent is called with the CKF_DONT_BLOCK flag set in the flags
            argument, and some slot’s event flag is set, then that event flag is cleared, and the call
            returns with the ID of that slot in the location pointed to by pSlot. If more than one slot’s
            event flag is set at the time of the call, one such slot is chosen by the library to have its
            event flag cleared and to have its slot ID returned.
            If WaitForSlotEvent is called with the CKF_DONT_BLOCK flag set in the flags
            argument, and no slot’s event flag is set, then the call returns with the value
            CKR_NO_EVENT. In this case, the contents of the location pointed to by pSlot when
            WaitForSlotEvent are undefined.<br />
            If WaitForSlotEvent is called with the CKF_DONT_BLOCK flag clear in the flags
            argument, then the call behaves as above, except that it will block. That is, if no slot’s
            event flag is set at the time of the call, WaitForSlotEvent will wait until some slot’s
            event flag becomes set. If a thread of an application has a WaitForSlotEvent call
            blocking when another thread of that application calls Finalize, the WaitForSlotEvent 
            throws an exception with the value CKR_CRYPTOKI_NOT_INITIALIZED.
            </remarks>
      <returns>The slot where the event occured</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">CryptokiException if a native error occurs</exception>
    </member>
    <member name="P:Cryptware.NCryptoki.Cryptoki.Licensee">
      <summary>
            Gets or sets the name of the licensee supplied in the license file
            </summary>
      <remarks>
      </remarks>
      <returns>the name of the licensee supplied in the license file</returns>
    </member>
    <member name="P:Cryptware.NCryptoki.Cryptoki.ProductKey">
      <summary>
            Gets or sets the product key supplied in the license file
            </summary>
      <remarks>
      </remarks>
      <returns>the product key supplied in the license file</returns>
    </member>
    <member name="P:Cryptware.NCryptoki.Cryptoki.AttachedCryptokiLib">
      <summary>
            Returns the attached native cryptoki library
            </summary>
      <remarks>
      </remarks>
      <returns>attached native cryptoki library</returns>
    </member>
    <member name="P:Cryptware.NCryptoki.Cryptoki.Info">
      <summary>
            Info related to the underlying native PKCS# Module
            </summary>
      <remarks>
      </remarks>
      <returns>CryptokiInfo about this object</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">CryptokiException if a native error occurs</exception>
    </member>
    <member name="P:Cryptware.NCryptoki.Cryptoki.Slots">
      <summary>
            The list of plugged slots
            </summary>
      <remarks>
      </remarks>
      <returns>List of plugged slots</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">CryptokiException if a native error occurs</exception>
    </member>
    <member name="P:Cryptware.NCryptoki.Cryptoki.ActiveSlots">
      <summary>
            The list of plugged slots with a smart card inserted
            </summary>
      <remarks>
      </remarks>
      <returns>List of plugged slots with a smart card inserted</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">CryptokiException if a native error occurs</exception>
    </member>
    <member name="T:Cryptware.NCryptoki.CryptokiException">
      <summary>
            Wraps a PKCS#11 error raised as an acception
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiException.GetErrorString(System.Int32)">
      <summary>
            Gets the error string related to the given error number.
            </summary>
      <param name="nErr">The error number</param>
      <returns>
      </returns>
            31/05/2010
        </member>
    <member name="P:Cryptware.NCryptoki.CryptokiException.ErrorCode">
      <summary>
            PKCS#11 Error Code
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="P:Cryptware.NCryptoki.CryptokiException.ErrorString">
      <summary>
            Gets the error string related to this exception
            </summary>
      <value>The error string.</value>
            31/05/2010
        </member>
    <member name="T:Cryptware.NCryptoki.Data">
      <summary>
            Wraps a PKCS#11 Data Object 
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.Data.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            30/11/2010
        </member>
    <member name="P:Cryptware.NCryptoki.Data.DataValue">
      <summary>
            Value of this data object
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Data.Application">
      <summary>
            Value of this CKA_APPLICATION attribute
            </summary>
      <value>The application value.</value>
            31/05/2010
        </member>
    <member name="T:Cryptware.NCryptoki.MechanismInfo">
      <summary>
            Wraps a PKCS#11 MechanismInfo structure
            </summary>
      <remarks>
            MechanismInfo gives information about a particular mechanism possibly
            supported by a token.
            </remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.MechanismInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            24/11/2010
        </member>
    <member name="P:Cryptware.NCryptoki.MechanismInfo.MechanismType">
      <summary>
            MechanismType
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.MechanismInfo.MinKeySize">
      <summary>
            Mininum key size for this mechanism 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.MechanismInfo.MaxKeySize">
      <summary>
            Maximum key size for this mechanism 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.MechanismInfo.Flags">
      <summary>
            Flags for this mechanism 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.MechanismInfo.MechanismName">
      <summary>
            Gets the name of the mechanism.
            </summary>
      <value>The name of the mechanism.</value>
            31/05/2010
        </member>
    <member name="T:Cryptware.NCryptoki.Mechanism">
      <summary>
            Wraps a PKCS#11 Mechanism Object 
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.Mechanism.#ctor(System.Int32,System.Object)">
      <summary>
             Constructor
             </summary>
      <remarks>Creates a new mechanism with given type and params</remarks>
      <param name="type">Mechanism type</param>
      <param name="param">Mechanism parameters</param>
    </member>
    <member name="M:Cryptware.NCryptoki.Mechanism.#ctor">
      <summary>
             Constructor
             </summary>
      <remarks>Creates a new empty mechanism</remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.Mechanism.Set(System.Int32,System.Object)">
      <summary>
             Sets the type and params of this mechanism object
             </summary>
      <remarks>
      </remarks>
      <param name="type">Mechanism type</param>
      <param name="param">Mechanism parameters</param>
    </member>
    <member name="M:Cryptware.NCryptoki.Mechanism.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            24/11/2010
        </member>
    <member name="P:Cryptware.NCryptoki.Mechanism.MechanismType">
      <summary>
            Mechanism Type
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Mechanism.Parameter">
      <summary>
            Mechanism Parameters
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Mechanism.MechanismName">
      <summary>
            Gets the name of the mechanism.
            </summary>
      <value>The name of the mechanism.</value>
            31/05/2010
        </member>
    <member name="T:Cryptware.NCryptoki.MechanismList">
      <summary>
            Implements a PKCS#11 Mechanism List structure
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.MechanismList.FindMechanism(System.Int32)">
      <summary>
            Find the given mechanism
            </summary>
      <param name="type">Mechanism Type</param>
      <returns>The mechanism or null if the mechanism is not found</returns>
            31/08/2010
        </member>
    <member name="M:Cryptware.NCryptoki.MechanismList.Contains(System.Int32)">
      <summary>
            Determines if the given mechanism is present in the list
            </summary>
      <param name="type">Mechanism Type</param>
    </member>
    <member name="P:Cryptware.NCryptoki.MechanismList.Count">
      <summary>
            Number of mechanism present in the list
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.CryptokiObjects">
      <summary>
            Implemens a set of PKCS#11 objects 
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiObjects.Find(Cryptware.NCryptoki.CryptokiCollection,System.Int32)">
      <summary>
            Finds objects  
            </summary>
      <remarks>
            Call C_FindObjectsInit, C_FindObjects, C_FindObjectsFinal of the underlying native PKCS#11<br />
            The object search operation will only find objects that the session can view. For 
            example, an object search in an “R/W Public Session” will not find any private objects
            (even if one of the attributes in the search template specifies that the search is for private objects).
            If a search operation is active, and objects are created or destroyed which fit the search
            template for the active search operation, then those objects may or may not be found by
            the search operation. Note that this means that, under these circumstances, the search
            operation may return invalid object handles.
            </remarks>
      <returns>A collection of objects found</returns>
      <param name="attList">List of attributes of the requested objects</param>
      <param name="nMaxCount">Max number of object to return</param>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">If a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiObjects.Find(Cryptware.NCryptoki.CryptokiCollection)">
      <summary>
            Finds the first objects matching criteria
            </summary>
      <remarks>Call C_FindObjectsInit, C_FindObjects, C_FindObjectsFinal of the underlying native PKCS#11<br />
            The object search operation will only find objects that the session can view. For 
            example, an object search in an “R/W Public Session” will not find any private objects
            (even if one of the attributes in the search template specifies that the search is for private objects).
            If a search operation is active, and objects are created or destroyed which fit the search
            template for the active search operation, then those objects may or may not be found by
            the search operation. Note that this means that, under these circumstances, the search
            operation may return invalid object handles.
            </remarks>
      <returns>The object found or null otherwise</returns>
      <param name="attList">List of attributes of the requested objects</param>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">If a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiObjects.Create(Cryptware.NCryptoki.CryptokiCollection)">
      <summary>
            Creates a new object
            </summary>
      <remarks>
            If a call to CreateObject cannot support the precise template supplied to it, it will fail
            and return without creating any object.
            If CreateObject is used to create a key object, the key object will have its
            CKA_LOCAL attribute set to CK_FALSE. If that key object is a secret or private key
            then the new key will have the CKA_ALWAYS_SENSITIVE attribute set to
            CK_FALSE, and the CKA_NEVER_EXTRACTABLE attribute set to CK_FALSE.
            Only session objects can be created during a read-only session. Only public objects can
            be created unless the normal user is logged in.
            </remarks>
      <returns>The object just created</returns>
      <param name="attList">List of attributes of the object to create</param>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">If a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.CryptokiObjects.Destroy(Cryptware.NCryptoki.CryptokiObject)">
      <summary>
            Destroys an object
            </summary>
      <remarks>
            Only session objects can be destroyed during a read-only session. Only public objects 
            can be destroyed unless the normal user is logged in.
            </remarks>
      <returns>0 if no error occurs or a PKCS#11 error otherwise</returns>
      <param name="obj">Object to destroy</param>
    </member>
    <member name="T:Cryptware.NCryptoki.Session">
      <summary>
            Manages a PKCS#11 Session
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.Close">
      <summary>
            Close the current session
            </summary>
      <remarks>
            C_CloseSession closes a session between an application and a token
            </remarks>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.SetPIN(System.String,System.String)">
      <summary>
            Set the PIN 
            </summary>
      <remarks>
            SetPIN modifies the PIN of the user that is currently logged in, or the CKU_USER
            PIN if the session is not logged in. OldPin points to the old PIN; NewPin points to the new
            PIN; This standard allows PIN values to
            contain any valid UTF8 character, but the token may impose subset restrictions.
            C_SetPIN can only be called in the “R/W Public Session” state, “R/W SO Functions”
            state, or “R/W User Functions” state. An attempt to call it from a session in any other
            state fails with error CKR_SESSION_READ_ONLY.
            If the token has a “protected authentication path”, as indicated by the
            CKF_PROTECTED_AUTHENTICATION_PATH flag in its CK_TOKEN_INFO being
            set, then that means that there is some way for a user to be authenticated to the token
            without having the application send a PIN through the Cryptoki library. One such
            possibility is that the user enters a PIN on a PINpad on the token itself, or on the slot
            device. To modify the current user’s PIN on a token with such a protected authentication
            path, the OldPin and NewPin parameters to SetPIN should be null. During
            the execution of SetPIN, the current user will enter the old PIN and the new PIN
            through the protected authentication path. It is not specified how the PINpad should be
            used to enter two PINs; this varies.
            If the token has a protected authentication path other than a PINpad, then it is tokendependent
            whether or not SetPIN can be used to modify the current user’s PIN
            </remarks>
      <param name="newPin">new pin</param>
      <param name="oldPin">old pin</param>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.SetPIN(System.Byte[],System.Byte[])">
      <summary>
            Set the PIN 
            </summary>
      <remarks>
            SetPIN modifies the PIN of the user that is currently logged in, or the CKU_USER
            PIN if the session is not logged in. OldPin points to the old PIN; NewPin points to the new
            PIN; This standard allows PIN values to
            contain any valid UTF8 character, but the token may impose subset restrictions.
            C_SetPIN can only be called in the “R/W Public Session” state, “R/W SO Functions”
            state, or “R/W User Functions” state. An attempt to call it from a session in any other
            state fails with error CKR_SESSION_READ_ONLY.
            If the token has a “protected authentication path”, as indicated by the
            CKF_PROTECTED_AUTHENTICATION_PATH flag in its CK_TOKEN_INFO being
            set, then that means that there is some way for a user to be authenticated to the token
            without having the application send a PIN through the Cryptoki library. One such
            possibility is that the user enters a PIN on a PINpad on the token itself, or on the slot
            device. To modify the current user’s PIN on a token with such a protected authentication
            path, the OldPin and NewPin parameters to SetPIN should be null. During
            the execution of SetPIN, the current user will enter the old PIN and the new PIN
            through the protected authentication path. It is not specified how the PINpad should be
            used to enter two PINs; this varies.
            If the token has a protected authentication path other than a PINpad, then it is tokendependent
            whether or not SetPIN can be used to modify the current user’s PIN
            </remarks>
      <param name="newPin">new pin</param>
      <param name="oldPin">old pin</param>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.Login(System.Int32,System.String)">
      <summary>
            Login to the token
            </summary>
      <remarks>
            When the user type is either CKU_SO or CKU_USER, if the call succeeds, each of the 
            application's sessions will enter either the "R/W SO Functions" state, the "R/W User 
            Functions" state, or the "R/O User Functions" state. If the user type is
            CKU_CONTEXT_SPECIFIC , the behavior of C_Login depends on the context in which
            it is called. Improper use of this user type will result in a return value
            CKR_OPERATION_NOT_INITIALIZED.<br />
            If the token has a “protected authentication path”, as indicated by the
            CKF_PROTECTED_AUTHENTICATION_PATH flag in its CK_TOKEN_INFO
            being set, then that means that there is some way for a user to be authenticated to the
            token without having the application send a PIN through the Cryptoki library. One such
            possibility is that the user enters a PIN on a PINpad on the token itself, or on the slot
            device. Or the user might not even use a PIN—authentication could be achieved by some
            fingerprint-reading device, for example. To log into a token with a protected
            authentication path, the pin parameter to Login should be null. When Login returns, 
            whatever authentication method supported by the token will have been
            performed; a return value of CKR_OK means that the user was successfully
            authenticated, and a return value of CKR_PIN_INCORRECT means that the user was denied access.
            If there are any active cryptographic or object finding operations in an application’s
            session, and then C_Login is successfully executed by that application, it may or may not
            be the case that those operations are still active. Therefore, before logging in, any active
            operations should be finished.<br />
            If the application calling Login has a R/O session open with the token, then it will be
            unable to log the SO into a session (see Section 6.7.7). An attempt to do this will result
            in the error code CKR_SESSION_READ_ONLY_EXISTS. Login may be called repeatedly, without intervening C_Logout calls, if (and only if) a
            key with the CKA_ALWAYS_AUTHENTICATE attribute set to CK_TRUE exists, and
            the user needs to do cryptographic operation on this key. See further Section 10.9 of PKCS#11 v.20 specifications.
            </remarks>
      <param name="userType">user type</param>
      <param name="pin">pin</param>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.Login(System.Int32,System.Byte[])">
      <summary>
            Logins the specified user type.
            </summary>
      <param name="userType">Type of the user.</param>
      <param name="pin">The pin.</param>
      <returns>
      </returns>
            01/12/2010
        </member>
    <member name="M:Cryptware.NCryptoki.Session.Logout">
      <summary>
            Logout
            </summary>
      <remarks>
            Depending on the current user type, if the call succeeds, each of the application’s
            sessions will enter either the “R/W Public Session” state or the “R/O Public Session” state.
            When Logout successfully executes, any of the application’s handles to private
            objects become invalid (even if a user is later logged back into the token, those handles
            remain invalid). In addition, all private session objects from sessions belonging to the application are destroyed.<br />
            If there are any active cryptographic or object-finding operations in an application’s
            session, and then Logout is successfully executed by that application, it may or may
            not be the case that those operations are still active. Therefore, before logging out, any active operations should be finished.        
            </remarks>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.InitPIN(System.String)">
      <summary>
            Init the PIN
            </summary>
      <param name="pin">PIN</param>
      <remarks>
            InitPIN initializes the normal user’s PIN. hSession is the session’s handle; pin points to the normal user’s PIN; 
            This  PIN can contain any valid UTF8 character, but the token may impose subset restrictions.<br />
            InitPIN can only be called in the “R/W SO Functions” state. An attempt to call it from a session in any other state fails with error CKR_USER_NOT_LOGGED_IN.
            If the token has a “protected authentication path”, as indicated by the CKF_PROTECTED_AUTHENTICATION_PATH flag in its CK_TOKEN_INFO being
            set, then that means that there is some way for a user to be authenticated to the token
            without having the application send a PIN through the Cryptoki library. One such
            possibility is that the user enters a PIN on a PINpad on the token itself, or on the slot
            device. To initialize the normal user’s PIN on a token with such a protected
            authentication path, the pin parameter to InitPIN should be null. During the
            execution of InitPIN, the SO will enter the new PIN through the protected authentication path.
            If the token has a protected authentication path other than a PINpad, then it is tokendependent
            whether or not InitPIN can be used to initialize the normal user’s token access.
            </remarks>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.InitPIN(System.Byte[])">
      <summary>
            Init the PIN
            </summary>
      <param name="pin">PIN</param>
      <remarks>
            InitPIN initializes the normal user’s PIN. hSession is the session’s handle; pin points to the normal user’s PIN; 
            This  PIN can contain any valid UTF8 character, but the token may impose subset restrictions.<br />
            InitPIN can only be called in the “R/W SO Functions” state. An attempt to call it from a session in any other state fails with error CKR_USER_NOT_LOGGED_IN.
            If the token has a “protected authentication path”, as indicated by the CKF_PROTECTED_AUTHENTICATION_PATH flag in its CK_TOKEN_INFO being
            set, then that means that there is some way for a user to be authenticated to the token
            without having the application send a PIN through the Cryptoki library. One such
            possibility is that the user enters a PIN on a PINpad on the token itself, or on the slot
            device. To initialize the normal user’s PIN on a token with such a protected
            authentication path, the pin parameter to InitPIN should be null. During the
            execution of InitPIN, the SO will enter the new PIN through the protected authentication path.
            If the token has a protected authentication path other than a PINpad, then it is tokendependent
            whether or not InitPIN can be used to initialize the normal user’s token access.
            </remarks>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.SignInit(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key)">
      <summary>
            Inits a Signature operation 
            </summary>
      <remarks>Call C_SignInit</remarks>
      <param name="key">Key used for signature</param>
      <param name="mech">Signature Mechanism</param>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.SignUpdate(System.Byte[])">
      <summary>
            Updates a Signature operation 
            </summary>
      <remarks>Call C_SignUpdate</remarks>
      <param name="data">data to sign</param>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.Sign(System.Byte[])">
      <summary>
            Performs a Signature  operation 
            </summary>
      <remarks>Call C_Sign</remarks>
      <param name="data">data to sign</param>
      <returns>Signature</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.SignFinal">
      <summary>
            Finalizes a Signature operation 
            </summary>
      <remarks>Call C_SignFinal</remarks>
      <returns>Signature</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.SignRecoverInit(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key)">
      <summary>
            Inits a Sign Recoveroperation 
            </summary>
      <remarks>Call SignRecoverInit</remarks>
      <param name="key">Key used for signature</param>
      <param name="mech">Signature Mechanism</param>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.SignRecover(System.Byte[])">
      <summary>
            Performs a Sign Recover  operation 
            </summary>
      <remarks>Call C_SignRecoverremarks&gt;</remarks>
      <param name="data">data to sign</param>
      <returns>Signature</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.EncryptInit(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key)">
      <summary>
            Inits an Encrypt operation 
            </summary>
      <remarks>Call C_EncryptInit</remarks>
      <param name="key">Key used for signature</param>
      <param name="mech">Signature Mechanism</param>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.Encrypt(System.Byte[])">
      <summary>
            Performs an Encrypt operation 
            </summary>
      <remarks>Call C_Encrypt</remarks>
      <param name="data">clear text</param>
      <returns>cipher text</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.EncryptFinal">
      <summary>
            Finalizes an Encrypt operation 
            </summary>
      <remarks>Call C_EncryptFinal</remarks>
      <returns>cipher text</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.EncryptUpdate(System.Byte[])">
      <summary>
            Updates an Encrypt operation 
            </summary>
      <remarks>Call C_EncryptUpdate</remarks>
      <param name="data">clear text</param>
      <returns>cipher text</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.VerifyInit(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key)">
      <summary>
            Inits a Verify operation 
            </summary>
      <remarks>Call C_VerifyInit</remarks>
      <param name="key">Key used for signature</param>
      <param name="mech">Signature Mechanism</param>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.VerifyUpdate(System.Byte[])">
      <summary>
            Updates a Verify operation 
            </summary>
      <remarks>Call C_VerifyUpdate</remarks>
      <param name="data">data to verify</param>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.Verify(System.Byte[],System.Byte[])">
      <summary>
            Performs a Verify operation 
            </summary>
      <remarks>Call C_Verify</remarks>
      <param name="data">data used as input for the signature</param>
      <param name="signature">signature</param>
      <returns>0 if the signature is valid, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.VerifyFinal(System.Byte[])">
      <summary>
            Finalizes a Verify operation 
            </summary>
      <remarks>Call C_VerifyFinal</remarks>
      <param name="signature">signature</param>
      <returns>0 if the signature is valid, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.VerifyRecoverInit(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key)">
      <summary>
            Inistializes a VerifyRecoverInit operation 
            </summary>
      <remarks>Call C_VerifyRecoverInit</remarks>
      <param name="key">Key used for signature</param>
      <param name="mech">Signature Mechanism</param>
      <returns>0 if the signature is valid, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.VerifyRecover(System.Byte[],System.Byte[])">
      <summary>
            Performs a Verify Recover operation 
            </summary>
      <remarks>Call C_VerifyRecover</remarks>
      <param name="data">data used as input for the signature</param>
      <param name="signature">signature</param>
      <returns>0 if the signature is valid, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.DigestInit(Cryptware.NCryptoki.Mechanism)">
      <summary>
            Inits a Digest operation 
            </summary>
      <remarks>Call C_DigestInit</remarks>
      <param name="mech">Digest Mechanism</param>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.Digest(System.Byte[])">
      <summary>
            Performs a Digest operation 
            </summary>
      <remarks>Call C_Digest</remarks>
      <param name="data">data to digest</param>
      <returns>digest</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.DigestFinal">
      <summary>
            Finalize a Digest operation 
            </summary>
      <remarks>Call C_DigestFinal</remarks>
      <returns>digest</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.DecryptUpdate(System.Byte[])">
      <summary>
            Updates a Decrypt operation 
            </summary>
      <remarks>Call C_DecryptUpdate</remarks>
      <param name="data">data to decrypt</param>
      <returns>the plain text</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.DigestUpdate(System.Byte[])">
      <summary>
            Updates a Digest operation 
            </summary>
      <remarks>Call C_DigestUpdate</remarks>
      <param name="data">data to digest</param>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.DigestKey(Cryptware.NCryptoki.Key)">
      <summary>
            Digests a Key
            </summary>
      <remarks>Call C_DigestKey</remarks>
      <param name="key">Key to digest</param>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.DigestEncryptUpdate(System.Byte[],Cryptware.NCryptoki.Key)">
      <summary>
            Update a DigestEncrypt operation 
            </summary>
      <remarks>Call C_DigestEncryptUpdate</remarks>
      <param name="data">data to digest and encrypt</param>
      <param name="key">Key used for encryption</param>
      <returns>digest</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.DecryptInit(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key)">
      <summary>
            Inits an Decrypt operation 
            </summary>
      <remarks>Call C_DecryptInit</remarks>
      <param name="key">Key used for signature</param>
      <param name="mech">Signature Mechanism</param>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.Decrypt(System.Byte[])">
      <summary>
            Performs an Decrypt operation 
            </summary>
      <remarks>Call C_Decrypt</remarks>
      <param name="data">cipher text</param>
      <returns>clear text</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.DeriveKey(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key,Cryptware.NCryptoki.CryptokiCollection)">
      <summary>
            Performs a Key Derivation
            </summary>
      <remarks>Call C_DeriveKey</remarks>
      <param name="data">mechanism for key derivation</param>
      <param name="baseKey">base key for derivation</param>
      <param name="template">template for the new derived key</param>
      <returns>Derived Key</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.DecryptFinal">
      <summary>
            Finalizes a Decrypt operation 
            </summary>
      <remarks>Call C_DecryptFinal</remarks>
      <returns>clear text</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.DecryptDigestUpdate(System.Byte[])">
      <summary>
            Update a DecryptDigest operation 
            </summary>
      <remarks>Call C_DecryptDigestUpdate</remarks>
      <param name="data">data to decrypt and digest </param>
      <returns>clear text</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.DecryptVerifyUpdate(System.Byte[])">
      <summary>
            Update a DecryptVerify operation 
            </summary>
      <remarks>Call C_DecryptVerifyUpdate</remarks>
      <param name="data">data to decrypt</param>
      <returns>clear text</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.SignEncryptUpdate(System.Byte[])">
      <summary>
            Update a SignEncrypt operation 
            </summary>
      <remarks>Call C_SignEncryptUpdate</remarks>
      <param name="data">data sign and encrypt</param>
      <returns>signed cipher text</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.WrapKey(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key,Cryptware.NCryptoki.Key)">
      <summary>
            Wraps a key
            </summary>
      <remarks>Call C_WrapKey</remarks>
      <param name="mech">Mechanism for wrapping</param>
      <param name="wrappingKey">Key used for wrapping</param>
      <param name="keyToWrap">Key to wrap</param>
      <returns>cipher text</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.UnwrapKey(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.Key,System.Byte[],Cryptware.NCryptoki.CryptokiCollection)">
      <summary>
            Unwraps a key
            </summary>
      <remarks>Call C_UnwrapKey</remarks>
      <param name="mech">Mechanism for wrapping</param>
      <param name="unwrappingKey">Key used for unwrapping</param>
      <param name="wrappedKey">Key to unwrap</param>
      <param name="attList">Attribute of the Key</param>
      <returns>Unwrapped Key</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.GenerateKey(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.CryptokiCollection)">
      <summary>
            Generate a key
            </summary>
      <remarks>Call C_GenerateKey</remarks>
      <param name="mech">Mechanism for generating the key</param>
      <param name="attList">List of attribute for the key</param>
      <returns>Generated Key</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.GenerateKeyPair(Cryptware.NCryptoki.Mechanism,Cryptware.NCryptoki.CryptokiCollection,Cryptware.NCryptoki.CryptokiCollection)">
      <summary>
            Generate a key pair
            </summary>
      <remarks>Call C_GenerateKeyPair</remarks>
      <param name="mech">Mechanism for generating the key</param>
      <param name="attListPub">List of attribute for the public key</param>
      <param name="attListPri">List of attribute for the private key</param>
      <returns>Generated Keys. public key at position 0, private key at position 1</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.GenerateRandom(System.Int32)">
      <summary>
            Generate a random number
            </summary>
      <remarks>Call C_GenerateRandom</remarks>
      <param name="len">Length in byte of the number to generate</param>
      <returns>Generated number</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.GetFunctionStatus">
      <summary>
            Gets Function Status
             </summary>
      <remarks>Call C_GetFunctionStatus</remarks>
      <returns>0 if no error occurs or a PKCS#11 error otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.GetOperationState">
      <summary>
            Gets Operation State
            </summary>
      <remarks>Call C_GetOperationState</remarks>
      <returns>Generated number</returns>
      <exception cref="T:Cryptware.NCryptoki.CryptokiException">if a PKCS#11 error occurs</exception>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.SeedRandom(System.Byte[])">
      <summary>
            Seed Random number generator
            </summary>
      <remarks>Call C_SeedRandom</remarks>
      <param name="seed">seed</param>
      <returns>0 if no error occurs or a PKCS#11 error otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Session.SetOperationState(System.Byte[],Cryptware.NCryptoki.Key,Cryptware.NCryptoki.Key)">
      <summary>
            Sets Operation State
            </summary>
      <remarks>Call C_SetOperationState</remarks>
      <param name="data">data</param>
      <param name="autKey">authentication key</param>
      <param name="encKey">encryption key</param>
      <returns>0 if no error occurs or a PKCS#11 error otherwise</returns>
    </member>
    <member name="P:Cryptware.NCryptoki.Session.Token">
      <summary>
            Gets the token where this session is open
            </summary>
      <value>The token.</value>
            01/11/2010
        </member>
    <member name="P:Cryptware.NCryptoki.Session.IsLoggedIn">
      <summary>
            Determines if a user is logged in
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Session.IsOpen">
      <summary>
            Determines if a session is open
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Session.Objects">
      <summary>
            List of objects in the session
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Session.Info">
      <summary>
            Session Info
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.SessionInfo">
      <summary>
            Wraps a PKCS#11 SessionInfo structure
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SessionInfo.State">
      <summary>
            Session State
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SessionInfo.Flags">
      <summary>
            Session flags
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SessionInfo.DeviceError">
      <summary>
            Session Device error
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SessionInfo.SlotID">
      <summary>
            Session Slot ID
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.SessionInfo.IsLoggedIn">
      <summary>
            Determines if the session is in loggedin state
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Slot">
      <summary>
            Wraps a PKCS#11 Slot structure
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.Slot.#ctor(System.Int32,Cryptware.NCryptoki.INCryptokiMngd)">
      <summary>
            Initializes a new instance of the <see cref="T:Cryptware.NCryptoki.Slot" /> class.
            </summary>
      <param name="slotID">The slot ID.</param>
      <param name="cryptokimngd">The cryptokimngd.</param>
            11/10/2010
        </member>
    <member name="M:Cryptware.NCryptoki.Slot.CloseAllSessions">
      <summary>
            Close all session related to this slot
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.Slot.InitToken(System.String,System.String)">
      <summary>
            Init this token
            </summary>
      <param name="pin">PIN</param>
      <param name="label">Label</param>
      <remarks>
            InitToken initializes a token. pin points to the
            SO’s initial PIN (which need not be null-terminated); label points to the 32-byte label of the token (which must be padded with
            blank characters). This standard allows PIN
            values to contain any valid UTF8 character, but the token may impose subset restrictions.
            If the token has not been initialized (i.e. new from the factory), then the pin parameter
            becomes the initial value of the SO PIN. If the token is being reinitialized, the pin
            parameter is checked against the existing SO PIN to authorize the initialization operation.
            In both cases, the SO PIN is the value pPin after the function completes successfully. If
            the SO PIN is lost, then the card must be reinitialized using a mechanism outside the
            scope of this standard. The CKF_TOKEN_INITIALIZED flag in the
            CK_TOKEN_INFO structure indicates the action that will result from calling
            InitToken. If set, the token will be reinitialized, and the client must supply the
            existing SO password in pin.
            When a token is initialized, all objects that can be destroyed are destroyed (i.e., all except
            for “indestructible” objects such as keys built into the token). Also, access by the normal
            user is disabled until the SO sets the normal user’s PIN. Depending on the token, some
            “default” objects may be created, and attributes of some objects may be set to default
            values.
            If the token has a “protected authentication path”, as indicated by the
            CKF_PROTECTED_AUTHENTICATION_PATH flag in its CK_TOKEN_INFO being set, then that means that there 
            is some way for a user to be authenticated to the
            token without having the application send a PIN through the Cryptoki library. One such
            possibility is that the user enters a PIN on a PINpad on the token itself, or on the slot device. 
            To initialize a token with such a protected authentication path, the pin 
            parameter to InitToken should be null. During the execution of InitToken, the SO’s PIN will be 
            entered through the protected authentication path. If the token has a protected authentication path 
            other than a PINpad, then it is tokendependent whether or not InitToken can be used to initialize the token.
            A token cannot be initialized if Cryptoki detects that any application has an open session
            with it; when a call to InitToken is made under such circumstances, the call fails with
            error CKR_SESSION_EXISTS. Unfortunately, it may happen when InitToken is 
            called that some other application does have an open session with the token, but Cryptoki
            cannot detect this, because it cannot detect anything about other applications using the
            token. If this is the case, then the consequences of the C_InitToken call are undefined. <br />
            The InitToken function may not be sufficient to properly initialize complex tokens. In
            these situations, an initialization mechanism outside the scope of Cryptoki must be
            employed. The definition of “complex token” is product specific.
            </remarks>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Slot.InitToken(System.Byte[],System.String)">
      <summary>
            Init this token
            </summary>
      <param name="pin">PIN</param>
      <param name="label">Label</param>
      <remarks>
            InitToken initializes a token. pin points to the
            SO’s initial PIN (which need not be null-terminated); label points to the 32-byte label of the token (which must be padded with
            blank characters). This standard allows PIN
            values to contain any valid UTF8 character, but the token may impose subset restrictions.
            If the token has not been initialized (i.e. new from the factory), then the pin parameter
            becomes the initial value of the SO PIN. If the token is being reinitialized, the pin
            parameter is checked against the existing SO PIN to authorize the initialization operation.
            In both cases, the SO PIN is the value pPin after the function completes successfully. If
            the SO PIN is lost, then the card must be reinitialized using a mechanism outside the
            scope of this standard. The CKF_TOKEN_INITIALIZED flag in the
            CK_TOKEN_INFO structure indicates the action that will result from calling
            InitToken. If set, the token will be reinitialized, and the client must supply the
            existing SO password in pin.
            When a token is initialized, all objects that can be destroyed are destroyed (i.e., all except
            for “indestructible” objects such as keys built into the token). Also, access by the normal
            user is disabled until the SO sets the normal user’s PIN. Depending on the token, some
            “default” objects may be created, and attributes of some objects may be set to default
            values.
            If the token has a “protected authentication path”, as indicated by the
            CKF_PROTECTED_AUTHENTICATION_PATH flag in its CK_TOKEN_INFO being set, then that means that there 
            is some way for a user to be authenticated to the
            token without having the application send a PIN through the Cryptoki library. One such
            possibility is that the user enters a PIN on a PINpad on the token itself, or on the slot device. 
            To initialize a token with such a protected authentication path, the pin 
            parameter to InitToken should be null. During the execution of InitToken, the SO’s PIN will be 
            entered through the protected authentication path. If the token has a protected authentication path 
            other than a PINpad, then it is tokendependent whether or not InitToken can be used to initialize the token.
            A token cannot be initialized if Cryptoki detects that any application has an open session
            with it; when a call to InitToken is made under such circumstances, the call fails with
            error CKR_SESSION_EXISTS. Unfortunately, it may happen when InitToken is 
            called that some other application does have an open session with the token, but Cryptoki
            cannot detect this, because it cannot detect anything about other applications using the
            token. If this is the case, then the consequences of the C_InitToken call are undefined. <br />
            The InitToken function may not be sufficient to properly initialize complex tokens. In
            these situations, an initialization mechanism outside the scope of Cryptoki must be
            employed. The definition of “complex token” is product specific.
            </remarks>
      <returns>0 if no error occurs, PKCS#11 error code otherwise</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Slot.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            24/11/2010
        </member>
    <member name="P:Cryptware.NCryptoki.Slot.SlotID">
      <summary>
            Slot ID
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Slot.Info">
      <summary>
            Slot Info
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Slot.Token">
      <summary>
            Token in the slot
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Slot.IsTokenPresent">
      <summary>
            Determines if a token is in this slot
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.SlotInfo">
      <summary>
            Wraps a PKCS#11 SlotInfo structure
            </summary>
            11/09/2010
        </member>
    <member name="M:Cryptware.NCryptoki.SlotInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            24/11/2010
        </member>
    <member name="P:Cryptware.NCryptoki.SlotInfo.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>The description.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.SlotInfo.Flags">
      <summary>
            Gets or sets the flags.
            </summary>
      <value>The flags.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.SlotInfo.IsTokenPresent">
      <summary>
            Gets a value indicating whether this instance is token present.
            </summary>
      <value>
        <c>true</c> if this instance is token present; otherwise, <c>false</c>.
            </value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.SlotInfo.IsRemovableDevice">
      <summary>
            Gets a value indicating whether this instance is removable device.
            </summary>
      <value>
        <c>true</c> if this instance is removable device; otherwise, <c>false</c>.
            </value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.SlotInfo.IsHardwareSlot">
      <summary>
            Gets a value indicating whether this instance is hardware slot.
            </summary>
      <value>
        <c>true</c> if this instance is hardware slot; otherwise, <c>false</c>.
            </value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.SlotInfo.HardwareVersion">
      <summary>
            Gets or sets the hardware version.
            </summary>
      <value>The hardware version.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.SlotInfo.FirmwareVersion">
      <summary>
            Gets or sets the firmware version.
            </summary>
      <value>The firmware version.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.SlotInfo.ManufacturerID">
      <summary>
            Gets or sets the manufacturer ID.
            </summary>
      <value>The manufacturer ID.</value>
            31/08/2010
        </member>
    <member name="T:Cryptware.NCryptoki.SlotList">
      <summary>
            Wraps a PKCS#11 Slot List structure
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.SlotList.GetSlot(System.Int32)">
      <summary>
            Gets the slot with given slot ID
            </summary>
      <param name="slotID">slot id</param>
    </member>
    <member name="M:Cryptware.NCryptoki.SlotList.Get(System.Int32)">
      <summary>
            Gets the slot with given its index
            </summary>
      <param name="idx">slot id</param>
    </member>
    <member name="P:Cryptware.NCryptoki.SlotList.Item(System.Int32)">
      <summary>
            Gets the slot with given its index
            </summary>
      <param name="idx">slot id</param>
    </member>
    <member name="P:Cryptware.NCryptoki.SlotList.Count">
      <summary>
            Gets the number of slots
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.Token">
      <summary>
            Manages a PKCS#11 Token 
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.Token.OpenSession(System.Int32)">
      <summary>
            Opens a session on this token
            </summary>
      <param name="flags">Flags for this session</param>
      <remarks>Calls C_OpenSession</remarks>
      <returns>a new Session Object</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Token.OpenSession(System.Int32,System.Object,System.Delegate)">
      <summary>
            Opens a session on this token
            </summary>
      <param name="flags">Flags for this session</param>
      <param name="app">Application Object</param>
      <param name="notify">Delegate for notification</param>
      <remarks>
            OpenSession opens a session between an application and a token in a particular slot.
            When opening a session with OpenSession, the flags parameter consists of the logical
            OR of zero or more bit flags defined in the CK_SESSION_INFO data type. For legacy
            reasons, the CKF_SERIAL_SESSION bit must always be set; if a call to
            OpenSession does not have this bit set, the call should return unsuccessfully with the
            error code CKR_PARALLEL_NOT_SUPPORTED.
            There may be a limit on the number of concurrent sessions an application may have with
            the token, which may depend on whether the session is “read-only” or “read/write”. An
            attempt to open a session which does not succeed because there are too many existing
            sessions of some type should return CKR_SESSION_COUNT.
            If the token is write-protected (as indicated in the CK_TOKEN_INFO structure), then
            only read-only sessions may be opened with it.
            If the application calling C_OpenSession already has a R/W SO session open with the
            token, then any attempt to open a R/O session with the token fails with error code
            CKR_SESSION_READ_WRITE_SO_EXISTS (see Section 6.7.7 of PKCS#11 v.2.20 specificatins).
            </remarks>
      <returns>a new Session Object</returns>
    </member>
    <member name="M:Cryptware.NCryptoki.Token.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            24/11/2010
        </member>
    <member name="P:Cryptware.NCryptoki.Token.Slot">
      <summary>
            Gets the slot where this token is inserted.
            </summary>
      <value>The slot.</value>
            01/11/2010
        </member>
    <member name="P:Cryptware.NCryptoki.Token.MechanismList">
      <summary>
            List of Mechanisms supported by this token
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.Token.Info">
      <summary>
            Token Info
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.TokenInfo">
      <summary>
            Wraps a PKCS#11 TokenInfo structure
            </summary>
    </member>
    <member name="M:Cryptware.NCryptoki.TokenInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            24/11/2010
        </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.Label">
      <summary>
            Token's Label
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.ManufacturerID">
      <summary>
            Token's Manufacturer ID
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.Model">
      <summary>
            Token's model
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.SerialNumber">
      <summary>
            Token's Serial Number
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.Flags">
      <summary>
            Token's Flags
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.MaxSessionCount">
      <summary>
            Max number of Sessions allowd by the token
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.SessionCount">
      <summary>
            Current number of Sessions opened on the token
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.MaxRWSessionCount">
      <summary>
            Max number of RW Sessions allowd by the token
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.RWSessionCount">
      <summary>
            Current number of RW Sessions opened on the token
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.MaxPINLen">
      <summary>
            Max PIN length
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.MinPINLen">
      <summary>
            Min PIN length
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.TotalPublicMemory">
      <summary>
            Total Public Memory
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.FreePublicMemory">
      <summary>
            Free Public Memory
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.TotalPrivateMemory">
      <summary>
            Total Private Memory
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.FreePrivateMemory">
      <summary>
            Free Private Memory
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.HardwareVersion">
      <summary>
            Hardware Version
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.FirmwareVersion">
      <summary>
            Firmware Version
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.TokenInfo.UTCTime">
      <summary>
            Time
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.X509AttributeCertificate">
      <summary>
            Wraps a PKCS#11 X509AttributeCertificate Object 
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.X509AttributeCertificate.ACIssuer">
      <summary>
            Value of this CKA_AC_ISSUER attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.X509AttributeCertificate.Owner">
      <summary>
            Value of this CKA_OWNER attribute
            </summary>
    </member>
    <member name="P:Cryptware.NCryptoki.X509AttributeCertificate.AttributeTypes">
      <summary>
            Value of this CKA_ATTR_TYPES attribute
            </summary>
    </member>
    <member name="T:Cryptware.NCryptoki.X509Certificate">
      <summary>
            Wraps a PKCS#11 X509Certificate
            </summary>    
            11/09/2010
        </member>
    <member name="P:Cryptware.NCryptoki.X509Certificate.Issuer">
      <summary>
            Gets the issuer.
            </summary>
      <value>The issuer.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.X509Certificate.Subject">
      <summary>
            Gets the subject.
            </summary>
      <value>The subject.</value>
            31/08/2010
        </member>
    <member name="P:Cryptware.NCryptoki.X509Certificate.ID">
      <summary>
            Gets the ID.
            </summary>
      <value>The ID.</value>
            31/08/2010
        </member>
  </members>
</doc>